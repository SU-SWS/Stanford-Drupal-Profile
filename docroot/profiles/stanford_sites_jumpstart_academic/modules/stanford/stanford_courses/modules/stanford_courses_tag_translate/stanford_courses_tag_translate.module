<?php
/**
 * @file
 * This module has a plugin for allowing direct string replacement from a table
 * in the database. It is primarily used on the new field in this module. The new
 * field is appended to stanford_course content types to allow for a translation
 * between the tags that come from explorecourses.stanford.edu and the end user.
 *
 */

include_once 'stanford_courses_tag_translate.features.inc';

/**
 * Implements hook_help().
 */
function stanford_courses_tag_translate_help($path, $arg) {
  switch ($path) {
    // Main module help for the block module.
    case 'admin/help#stanford_courses_tag_translate':
      $output = "<h3>" . t("How to Use the Stanford Courses Tag Translate Module") . "</h3>";
      $output .= l(t("See README"), drupal_get_path('module', 'stanford_courses_tag_translate') . '/README.md');
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function stanford_courses_tag_translate_menu() {

  // Landing page.
  $items['admin/config/stanford/courses/tag-translate'] = array(
    'title' => 'Stanford Courses Tag Translate',
    'page callback' => 'stanford_courses_tag_translate_settings',
    'page arguments' => array(),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => "stanford_courses_tag_translate.pages.inc",
  );

  // Overview.
  $items['admin/config/stanford/courses/tag-translate/list'] = array(
    'title' => 'List',
    'page callback' => 'stanford_courses_tag_translate_settings',
    'page arguments' => array(),
    'access arguments' => array('access administration pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => "stanford_courses_tag_translate.pages.inc",
  );

  // Create a new item.
  $items['admin/config/stanford/courses/tag-translate/new'] = array(
    'title' => 'New tag translation',
    'page callback' => 'stanford_courses_tag_translate_new',
    'page arguments' => array(),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_ACTION,
    'file' => "stanford_courses_tag_translate.pages.inc",
  );

  // Edit an item.
  $items['admin/config/stanford/courses/tag-translate/edit/%'] = array(
    'title' => 'Edit tag translation',
    'page callback' => 'stanford_courses_tag_translate_edit',
    'page arguments' => array(6),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => "stanford_courses_tag_translate.pages.inc",
  );

  // Delete an item.
  $items['admin/config/stanford/courses/tag-translate/delete/%'] = array(
    'title' => 'Delete tag translation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array("stanford_courses_tag_translate_delete_form", 6),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => "stanford_courses_tag_translate.pages.inc",
  );

  // Import a bunch of translations.
  $items['admin/config/stanford/courses/tag-translate/import'] = array(
    'title' => 'Import',
    'page callback' => 'stanford_courses_tag_translate_import',
    'page arguments' => array(),
    'access arguments' => array('administer feeds_tamper'),
    'type' => MENU_LOCAL_TASK,
    'file' => "stanford_courses_tag_translate.pages.inc",
  );

  // Export a bunch of translations.
  $items['admin/config/stanford/courses/tag-translate/export'] = array(
    'title' => 'Export',
    'page callback' => 'stanford_courses_tag_translate_export',
    'page arguments' => array(),
    'access arguments' => array('administer feeds_tamper'),
    'type' => MENU_LOCAL_TASK,
    'file' => "stanford_courses_tag_translate.pages.inc",
  );


  return $items;
}


/*
 * Implements hook_ctools_plugin_directory().
 */
function stanford_courses_tag_translate_ctools_plugin_directory($module, $plugin) {
  if ($module == 'feeds_tamper') {
    return 'plugins';
  }
}

/**
 * Gets all the translations out of the database keyed with the tag.
 *
 * @return array
 *   An array of translations keyed by the tag.
 */
function stanford_courses_tag_translate_get_translation_table() {

  $ttable = &drupal_static(__FUNCTION__);

  if ($ttable) {
    return $ttable;
  }

  $results = stanford_courses_tag_translate_get_all_translations();

  // Because. Raisons.
  $ttable = $results;

  return $ttable;
}

/**
 * Returns an array of sorted results from the translation table.
 *
 * @return array
 *   An array of sorted (alphabetically) results.
 */
function stanford_courses_tag_translate_get_all_translations() {
  $results = db_select("stanford_courses_tag", "sct")
              ->fields("sct", array("ctag", "chuman", "ctid"))
              ->orderBy("ctag")
              ->execute()
              ->fetchAllAssoc("ctag");

  // Tags are in a weird THIS::3that format and needs some fancy sorting.
  ksort($results, SORT_NATURAL | SORT_FLAG_CASE);
  return $results;
}

/**
 * Returns a key => value array of tag translations.
 *
 * @return array
 *   A single dimension array of key => value translations.
 */
function stanford_courses_tag_translate_get_all_translations_array() {
  $tags = stanford_courses_tag_translate_get_all_translations();
  foreach ($tags as $k => $v) {
    $tags[$k] = $v->chuman;
  }
  return $tags;
}

/**
 * Return a specific tag translation.
 *
 * Fetches a tag translation out of the database by the CTID field.
 *
 * @param int $id
 *   The course tag translation id.
 *
 * @return object
 *   The tag translation objct.
 */
function stanford_courses_tag_translate_get_translation($id) {
  $results = db_select("stanford_courses_tag", "sct")
              ->fields("sct", array("ctag", "chuman", "ctid"))
              ->condition("ctid", $id)
              ->orderBy("ctag")
              ->execute()
              ->fetchAllAssoc("ctid");

  return $results[$id];
}

/**
 * Alters the stanford_course_importer feed importer.
 *
 * If the feed importer is in code then alter it to add the human translated
 * field mapping and configuration. This function is also called by hook_install
 * if the feed importer settings are in the database.
 *
 * @param array $importers
 *   An array of default feed importers.
 */
function stanford_courses_tag_translate_feeds_importer_default_alter(&$importers) {

  // Only want the one.
  if (!isset($importers['stanford_course_importer'])) {
    return NULL;
  }

  // Just want this guy.
  $importer = &$importers['stanford_course_importer'];

  // Lets use the config object available.
  $config = $importer->config;

  // Get the xpath count for this.
  ksort($config['parser']['config']['sources'], SORT_NATURAL);
  $keys = array_keys($config['parser']['config']['sources']);
  $key = array_pop($keys);
  $xcurrent = str_replace("xpathparser:", "", $key);
  $xcount = (int) $xcurrent + 1;

  // Set the parser source.
  $config['parser']['config']['sources']["xpathparser:" . $xcount] = "tags/tag";

  // Set to return back raw XML.
  $config['parser']['config']['rawXML']["xpathparser:" . $xcount] = "xpathparser:" . $xcount;

  // No debug.
  $config['parser']['config']["exp"]['debug']["xpathparser:" . $xcount] = 0;

  // Processor.
  $config['processor']['config']['mappings'][$xcount] = array(
    'source' => "xpathparser:" . $xcount,
    'target' => "field_s_course_tag_human",
    'autocreate' => TRUE,
  );

  // Put the config back.
  $importer->config = $config;

  // Pack up the importer.
  $importers["stanford_course_importer"] = $importer;

}

/**
 * Add in the required tampers to make the translation work.
 *
 * Need to look up which mapping the human field is on as it could change. This
 * alter seems to work regardless of in code or in database settings.
 *
 * @param array $tampers
 *   An array of tamper items.
 */
function stanford_courses_tag_translate_feeds_tamper_default_alter(&$tampers) {

  // Just this guy.
  $importer = feeds_importer_load("stanford_course_importer");

  // If not there then we don't want to do any more.
  if (!$importer) {
    return;
  }

  // Get the xpath count for this by finding the mapping to the human field.
  $xcount = NULL;
  $options = $importer->processor->config["mappings"];

  // The mapping is usually at tha back of the pile.
  $options = array_reverse($options);
  foreach ($options as $opt) {
    if ($opt['target'] == "field_s_course_tag_human") {
      $xcount = (int) str_replace("xpathparser:", "", $opt['source']);
      break;
    }
  }

  // No altering if the field was not found.
  if (!$xcount) {
    return;
  }

  /*
  Three alters to follow. The first two as the same as the one for the combined
  tag field so we start with the same value as it does. The last one is the
  custom plugin that uses the translation set out of the database table
  stanford_courses_tag_translate
   */

  $feeds_tamper = new stdClass();
  $feeds_tamper->disabled = FALSE; /* Edit this to true to make a default feeds_tamper disabled initially */
  $feeds_tamper->api_version = 2;
  $feeds_tamper->id = 'stanford_course_importer-xpathparser_' . $xcount . '-clean_up_additional_xml';
  $feeds_tamper->importer = 'stanford_course_importer';
  $feeds_tamper->source = 'xpathparser:' . $xcount;
  $feeds_tamper->plugin_id = 'find_replace_regex';
  $feeds_tamper->settings = array(
    'find' => '/<\\/?organization>|<\\/?tag>|<\\/?name>|\\s{2,}/',
    'replace' => '',
    'limit' => '',
    'real_limit' => -1,
  );
  $feeds_tamper->weight = 1;
  $feeds_tamper->description = 'Clean up additional XML';
  $tampers['stanford_course_importer-xpathparser_' . $xcount . '-clean_up_additional_xml'] = $feeds_tamper;

  $feeds_tamper = new stdClass();
  $feeds_tamper->disabled = FALSE; /* Edit this to true to make a default feeds_tamper disabled initially */
  $feeds_tamper->api_version = 2;
  $feeds_tamper->id = 'stanford_course_importer-xpathparser_' . $xcount . '-replace_close_op_doub';
  $feeds_tamper->importer = 'stanford_course_importer';
  $feeds_tamper->source = 'xpathparser:' . $xcount;
  $feeds_tamper->plugin_id = 'find_replace_regex';
  $feeds_tamper->settings = array(
    'find' => '/<\\/organization>\\s{1,}<name>/',
    'replace' => '::',
    'limit' => '',
    'real_limit' => -1,
  );
  $feeds_tamper->weight = 0;
  $feeds_tamper->description = 'Replace closing/opening tags with double-colon';
  $tampers['stanford_course_importer-xpathparser_' . $xcount . '-replace_close_op_doub'] = $feeds_tamper;

  $feeds_tamper = new stdClass();
  $feeds_tamper->disabled = FALSE; /* Edit this to true to make a default feeds_tamper disabled initially */
  $feeds_tamper->api_version = 2;
  $feeds_tamper->id = 'stanford_course_importer-xpathparser_' . $xcount . '-course_translate_tamper';
  $feeds_tamper->importer = 'stanford_course_importer';
  $feeds_tamper->source = 'xpathparser:' . $xcount;
  $feeds_tamper->plugin_id = 'stanford_courses_tag_translate_tamper';
  $feeds_tamper->settings = array();
  $feeds_tamper->weight = 2;
  $feeds_tamper->description = 'Translate into human readable values';
  $tampers['stanford_course_importer-xpathparser_' . $xcount . '-course_translate_tamper'] = $feeds_tamper;

}
