<?php
/**
 * @file
 * Installation and update functionality
 *
 * @author shea mckinney <sheamck@stanford.edu>
 *
 */

/**
 * Implements hook_requirements().
 */
function stanford_courses_requirements($phase) {
  $requirements = array();

  switch ($phase) {
    case 'update':

      // Ensure that field_collection module is enabled before updating.
      if (!module_exists('field_collection')) {
        // Be nice and try to enable it for the user.
        if (!module_enable(array('field_collection'))) {
          // Still no dice. Throw out requirement.
          $requirements['fieldcollections_enabled'] = array(
            'title' => 'Field Collection Module Required',
            'value' => 'Not installed',
            'description' => 'Field Collection module required for version 2.x of the stanford courses module. Please download and enable the field_collection module before proceeding. http://drupal.org/project/field_collection',
            'severity' => REQUIREMENT_ERROR,
          );
        }
      }

      // Ensure that field_group module is enabled before updating.
      if (!module_exists('field_group')) {
        // Be nice and try to enable it for the user.
        if (!module_enable(array('field_group'))) {
          // Still no dice. Throw out requirement.
          $requirements['fieldgroup_enabled'] = array(
            'title' => 'Field Group Module Required',
            'value' => 'Not installed',
            'description' => 'Field Group module required for version 2.x of the stanford courses module. Please download and enable the field_group module before proceeding. http://drupal.org/project/field_group',
            'severity' => REQUIREMENT_ERROR,
          );
        }
      }
      break;

    case 'runtime':
      // Ensure that stanford_feeds_helper is available
      if (!module_exists('stanford_feeds_helper')) {
        $requirements['stanford_feeds_helper_enabled'] = array(
          'title' => 'Stanford Feeds Helper Module Required',
          'value' => 'Not installed',
          'description' => 'Stanford Feeds Helper module required for version 4.x of the stanford courses module. Please download and enable the stanford_feeds_helper module before proceeding. https://github.com/SU-SWS/stanford_feeds_helper',
          'severity' => REQUIREMENT_ERROR,
        );
      }

  }

  return $requirements;
}


/**
 * Implementats hook_install().
 */
function stanford_courses_install() {

  // Install a default view for the user to play with.
  _stanford_courses_dump_views();

}

/**
 * Implements hook_enable().
 */
function stanford_courses_enable() {
  // Enable module functions
}

/**
 * Implements hook_disable().
 */
function stanford_courses_disable() {
  // Disable module functions
}

/**
 * Implements hook_uninstall().
 */
function stanford_courses_uninstall() {
  variable_del("stanford_courses_limit_field_collections");
}

/**
 * 7.x-1.x Update #1. Placeholder Legacy update
 */
function stanford_courses_update_7100(&$sandbox) {
  // Legacy Placeholder
  return;
}

/**
 * 7.x-1.x to 7.x-2.x Upgrade path function.
 * BACKUP YOUR DATABASE BEFORE RUNNING THIS UPGRADE
 * This upgrade takes care of renaming fields and content types.
 * Generally changing the machine names is a very bad thing.
 * We are going to take some liberties here. Views and other things like
 * workbench will have to be updated manually as they store machine names and we
 * will not be looking to change them. This is primarily for drupal core only.
 * Please also be aware that all course_section and course_section_importer
 * content types and nodes will be deleted. Permanently.
 */
function stanford_courses_update_7200(&$sandbox) {

  /**
   * @todo  Check to see if the fact that a few unique keys on the field
   * database tables have a key that is named after the old convention but
   * points to the name convention field causes any performance problems.
   */

  // Do a quick check if drush.
  // If drush is being used then the hook_requirements is bypassed and it is
  // possible the user is trying to upgrade without enabling field
  // collections. Do it here or die.
  if (drupal_is_cli()) {
    if(!_require_helper('field_collection')) {
      throw new DrupalUpdateException('Missing Field Collection Dependency');
      return FALSE;
    }
  }

  /**
   * Schema Changes!
   * Remove field_stanford_course_section
   *
   * Add field_s_course_section_info - This will be done through the feature
   * Add field_s_course_code_integer - This will be done through the feature
   *
   * For the rest of the fields attached to the bundle change the name from 'field_stanford_course' to 'field_s_course'
   */

  // Remove all section tables, fields, everything!
  node_type_delete('stanford_course_section');
  node_type_delete('stanford_course_section_importer');

  // Remove the node reference field from the course content type.
  field_delete_field('field_stanford_course_section');
  field_purge_batch(50);

  db_delete('field_config_instance')
    ->condition('bundle', 'stanford_course_section_importer')
    ->execute();

  // Remove all section nodes from the system ...
  module_load_include('php', 'stanford_courses', 'inc/delete_all.inc');
  _stanford_courses_delete_all_normal(array(
    'stanford_course_section',
    'stanford_course_section_importer'
  ));

  // current field name => new field name
  $fields = array(
    'field_stanford_course_code'      => 'field_s_course_code',
    'field_stanford_course_ger'       => 'field_s_course_ger',
    'field_stanford_course_subject'   => 'field_s_course_subject',
    'field_stanford_course_year'      => 'field_s_course_year',
    'field_stanford_course_course_id' => 'field_s_course_id',
    'field_stanford_course_tag_org'   => 'field_s_course_tag_org',
    'field_stanford_course_tag_name'  => 'field_s_course_tag_name',
    'field_stanford_course_scid'      => 'field_s_course_scid',
    'field_stanford_course_ec_link'   => 'field_s_course_ec_link',
  );

  // Loop through each of the fields/tables with the old name and change them
  foreach($fields as $field_name => $new_field_name) {

    // First check that field_name exists
    if(!db_table_exists('field_data_' . $field_name)) {
      // If we cannot find a data table then just continue.
      continue;
    }

    // Ok some fun things with going from 1.x -> 3.x and features. Looks like
    // this code triggers the feature to create the new tables. Lets check to
    // see if they already exist and kill em.

    if(db_table_exists('field_data_' . $new_field_name)) {
      db_drop_table('field_data_' . $new_field_name);
      db_drop_table('field_revision_' . $new_field_name);
    }

    // Define some things...
    $data_table_name = 'field_data_' . $field_name;
    $revision_table_name = 'field_revision_' . $field_name;
    $field_info = field_info_field($field_name);
    $storage_details = $field_info['storage']['details'];

    // The storage for each field has unique configuration. Must follow.
    foreach($storage_details['sql']['FIELD_LOAD_CURRENT'] as $field) {
      // Change the field names.
      foreach($field as $key => $value) {

        // Rename the field table columns and preserve existing spec. Let
        // features take care of any configuration changes.
        $spec = $field_info['columns'][$key];
        db_change_field($data_table_name, $value, $new_field_name . "_" . $key, $spec);
        db_change_field($revision_table_name, $value, $new_field_name . "_" . $key, $spec);

      }
    }

    // Change the field storage table names.
    db_rename_table($data_table_name, 'field_data_' . $new_field_name);
    db_rename_table($revision_table_name, 'field_revision_' . $new_field_name);

    // Change the field names in the field_config and
    // field_instance_config tables

    db_update('field_config')
      ->fields(
        array(
          'field_name' => $new_field_name,
        )
      )
      ->condition('field_name', $field_name, '=')
      ->execute();

    db_update('field_config_instance')
      ->fields(
        array(
          'field_name' => $new_field_name,
        )
      )
      ->condition('field_name', $field_name, '=')
      ->execute();

  } /// end foreach loop on fields... whew.


  /**
   * Revert the feature!
   */

  // Kill any potential locks prior to revert...
  // I wonder why this isnt in the semaphore table?
  variable_del('features_semaphore');

  // Get the version of features that is installed.
  $f_info = drupal_parse_info_file(drupal_get_path('module', 'features') . '/features.info');
  $version_full = $f_info['version'];
  $version_parts = explode("-", $version_full);
  $minors = explode(".", $version_parts[1]);
  $minor = intval($minors[0]);

  if ($minor <= 1) {
   features_revert(
    array('stanford_courses' => array(
        'field',
        'ctools',
        'feeds_importer',
        'feeds_tamper',
        'node',
        'variable',
        )
      )
    );
  } else {
    features_revert(
    array('stanford_courses' => array(
        'field',
        'field_base',
        'field_instance',
        'ctools',
        'feeds_importer',
        'feeds_tamper',
        'node',
        'variable',
        )
      )
    );
  }

  // We are doing some very hacky things. Lets be sure the lock is removed
  // after we are done here.
  variable_del('features_semaphore');

  /**
   * Mark all course nodes as needing to be updated/imported again.
   */

  // Expire the hash in the feeds_item table in order to 'trick' feed_importer
  // into thinking that there is new content
  db_update('feeds_item')
    ->fields(
      array(
        'hash' => 'nullified'
      )
    )
    ->condition('id', 'stanford_course_importer')
    ->execute();

  // Remove the extra configuration on the feeds_source configuration for
  // legacy importer nodes. The xpathparser is no longer correct and should
  // just be dropped.

  $configs = db_select('feeds_source', 'fs')
  ->fields('fs',
    array(
    'feed_nid','config'
    ))
  ->condition('id', 'stanford_course_importer')
  ->execute();

  // Loop through each of the configured nodes and drop the xpathparser config.
  while ($values = $configs->fetchAssoc()) {
    $nid = $values['feed_nid'];
    $importer_configuration = unserialize($values['config']);
    unset($importer_configuration['FeedsXPathParserXML']);
    db_update('feeds_source')
      ->fields(array('config' => serialize($importer_configuration)))
      ->condition('feed_nid', $nid)
      ->execute();
  }

  // feeds_reschedule('stanford_course_importer');
  // feeds_importer('stanford_course_importer')->schedule();
  // feeds_source($id, $row->feed_nid)->schedule();

  /**
   * Leave a message to the user that they will have to manually run the
   * import again as the course nodes have been invalidated.
   */
  drupal_set_message(t('Update to Course Importer was successful. All existing course nodes will need to be updated. Please run the import on each of your course importer nodes in order to update the course nodes with the new information that is available.'), 'status');

  /**
   * Views
   * Check to see if the default views have been modified and are in the
   * database. If the view is in the DB then leave it alone. If there is no view
   * in the DB write the new view to the DB and be done with it.
   */

  _stanford_courses_dump_views();

  return TRUE;
}

/**
 * Dump the exported views from (views/*) folder into the DB
 * @return True if dumped, False if not dumped.
 */
function _stanford_courses_dump_views() {

  // Require views module. Yes really.
  if(!_require_helper('views')) {
    return FALSE;
  }

  // Look for a view in the DB.
  $result = db_select('views_view', 'vw')
            ->fields('vw', array('name'))
            ->condition('name', 'stanford_courses')
            ->execute();

  // There should only ever be 1 or none.
  if($result->rowCount()) {
    drupal_set_message(t('You have modified the stanford_course View. This View will need to be updated to reflect the new content type structure. You should go change this now: ') . l('Views Admin', 'admin/structure/views/stanford_courses'), 'warning');
    return FALSE;
  }

  // Load the view includes.
  module_load_include('inc', 'stanford_courses', 'views/stanford_courses.views_default');

  // Save the views.
  $views = stanford_courses_get_views();
  foreach($views as $view_name => $view_object) {
    $view_object->save();
  }

  return TRUE;
}

/**
 * Update from 7.x-2.x -> 7.x-3.x
 */
function stanford_courses_update_7300(&$sandbox) {

  // Upadate the importers to use the new xml schema
  // xml-20111011  ->>- xml-20130201

  $rows = db_query("SELECT * FROM {feeds_source}");
  foreach ($rows as $row) {
    $source = feeds_source($row->id, $row->feed_nid);
    $config = $source->getConfig();
    $config['FeedsHTTPFetcher']['source'] = str_replace("xml-20111011", "xml-20130201", $config['FeedsHTTPFetcher']['source']);
    $source->setConfig($config);
    $source->save();
  }

  // Revert for the user.
  features_revert(
    array(
      'stanford_courses' => array(
        'field_base',
        'field_instance',
        'ctools',
        'feeds_importer',
        'feeds_tamper',
        'node',
        'variable',
      )
    )
  );

}

/**
 * Update xml schema from 20130201 -> 20140630
 */
function stanford_courses_update_7400(&$sandbox) {
  $rows = db_query("SELECT * FROM {feeds_source}");
  foreach ($rows as $row) {
    $source = feeds_source($row->id, $row->feed_nid);
    $config = $source->getConfig();
    $config['FeedsHTTPFetcher']['source'] = str_replace("xml-20130201", "xml-20140630", $config['FeedsHTTPFetcher']['source']);
    $source->setConfig($config);
    $source->save();
  }
}

/**
 * Enable new dependency stanford_feeds_helper.
 */
function stanford_courses_update_7401(&$sandbox) {
  if (!module_exists("stanford_feeds_helper")) {
    try {
      module_enable(array("stanford_feeds_helper"), FALSE);
    }
    catch (Exception $e) {
      throw new DrupalUpdateException("Could not enable stanford_helper_module.");
    }
  }
}

/**
 * Checks to see if a module exists and is enabled. If the module is not
 * enabled it trys to enable it. Failing that it returns false and logs a
 * watchdog message
 * @param [string] $module_name The name of the module to enable
 * @param bool $clear_caches true to clear all caches.
 * @return bool True if successfully enabled or is already enabled.
 */
function _require_helper($module_name, $clear_caches = TRUE) {

  if (!module_exists($module_name)) {
    if (!module_enable(array($module_name))) {
      watchdog('stanford_courses', 'Could not enable the ' . $module_name . '. Terminated update_7200.');
      return FALSE;
    }
    else {
      watchdog('stanford_courses', 'Enabled ' . $module_name . ' Module');
      // Need to clear the caches once this is enabled or features revert
      // will not be able to find the field type.
      if ($clear_caches) {
        drupal_flush_all_caches();
      }
    }
  }

  return TRUE;
}

/**
 * Change the feeds field collection importer limit to the new feeds helper
 * module instead of with us.
 */
function stanford_courses_update_7402(&$sandbox) {
  $limit = variable_get("stanford_courses_limit_field_collections", -1);
  if ($limit !== -1) {
    variable_set("stanford_feeds_helper_limit_field_collections", $limit);
  }
  variable_del("stanford_courses_limit_field_collections");
}
