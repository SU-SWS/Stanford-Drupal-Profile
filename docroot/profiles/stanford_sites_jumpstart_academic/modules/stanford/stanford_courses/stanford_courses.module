<?php
/**
 * @file
 * Code for the Stanford Courses feature.
 */

include_once 'stanford_courses.features.inc';

/**
 * Implements hook_help().
 */
function stanford_courses_help($path, $arg) {
  switch ($path) {
    case 'admin/help#stanford_courses':
      $output = '<p>' . t('This module provides a turnkey solution for importing course information from !explorecourses. It includes a &quot;Stanford Course&quot; content type and a &quot;meta&quot; content type for importing (&quot;Stanford Course Importer&quot;). ', array('!explorecourses' => l('explorecourses.stanford.edu', 'http://explorecourses.stanford.edu'))) . '</p>';
      $output .= '<h2>' . t('Importing Courses') . '</h2>';
      $output .= '<p>' . t('To import from a feed, first construct the search for the courses that you want to import at !explorecourses.', array('!explorecourses' => l('explorecourses.stanford.edu', 'http://explorecourses.stanford.edu'))) .'</p>';
      $output .= '<p>' . t('Paste the URL of your search into the URL box (e.g., &quot;http://explorecourses.stanford.edu/search?view=catalog&filter-coursestatus-Active=on...&quot; etc.) at !import and click the <strong>Save</strong> button to import <em>course</em> information. (The module will &quot;automagically&quot; convert the search URL into an XML URL.)', array('!import' => l('node/add/stanford-course-importer', 'node/add/stanford-course-importer'))) .'</p>';
      $output .= '<p>' . t('A link to the course listing on ExploreCourses automatically will be created for each course node.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_form_alter().
 *
 * Modify the search URL to retrieve the XML URL instead.
 */
function stanford_courses_form_alter(&$form, &$form_state, $form_id) {
  if (($form_id == 'stanford_course_importer_node_form') || ($form_id == 'stanford_course_section_importer_node_form') || $form_id == 'stanford_course_class_importer_node_form' || $form_id == 'feeds_import_tab_form') {
    // Make our validation function run first.
    if (is_array($form['#validate'])) {
      array_unshift($form['#validate'], 'stanford_courses_feed_url_validate');
    }
    else {
      $form['#validate'][] = 'stanford_courses_feed_url_validate';
    }
  }
  if ($form_id == 'stanford_course_node_form') {
    // Make our validation function run first.
    if (is_array($form['#validate'])) {
      array_unshift($form['#validate'], 'stanford_courses_ec_link_validate');
    }
    else {
      $form['#validate'][] = 'stanford_courses_ec_link_validate';
    }
  }
}

/**
 * Modify the search URL to retrieve the XML URL instead.
 */
function stanford_courses_feed_url_validate($form, &$form_state) {
  if (isset($form_state['values']['feeds'])) {
    // Let's make things a little easier on the user.
    $feed_url = $form_state['values']['feeds']['FeedsHTTPFetcher']['source'];
    $feed_url = preg_replace('/view\=catalog/', 'view=xml-20140630', $feed_url);
    // Replace older schemas.
    $feed_url = preg_replace('/view\=xml\-20111011/', 'view=xml-20140630', $feed_url);
    $feed_url = preg_replace('/view\=xml\-20130201/', 'view=xml-20140630', $feed_url);
    $feed_url = preg_replace('/https/', 'http', $feed_url);
    form_set_value(array('#parents' => array('feeds', 'FeedsHTTPFetcher', 'source')), $feed_url, $form_state);
  }
}

/*
 * Modify the ExploreCourses link to pass the subject and code through urlencode().
 */
function stanford_courses_ec_link_validate($form, &$form_state) {
  $subject = $form_state['values']['field_s_course_subject']['und'][0]['value'];
  $code = $form_state['values']['field_s_course_code']['und'][0]['value'];
  $ec_link = 'http://explorecourses.stanford.edu/search?view=catalog&filter-coursestatus-Active=on&q=' . urlencode($subject) . urlencode($code);
  form_set_value(array('#parents' => array('field_s_course_ec_link', 'und', 0, 'url')), $ec_link, $form_state);
}

/*
 * Implements hook_ctools_plugin_directory().
 */
function stanford_courses_ctools_plugin_directory($module, $plugin) {
  if ($module == 'feeds_tamper') {
    return 'plugins';
  }
}


// /////////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

/**
 * Multiple field values are a pain in the rear. They are additive and we do not
 * always want them to be. This function targets a couple of items and truncates
 * their values before saving the new ones.
 * @param $target
 * @param $entity
 * @param $field
 * @param $field_collection_item
 * @param $value
 */
function stanford_courses_sub_target_pre_callback_parse($target, $sub_target, &$entity, &$field, &$field_collection_item, $value) {

  // Clear out all previous values for this field as we want a replace and not an additive.
  if ($target == "field_s_course_section_info") {
    switch ($sub_target) {
      case "field_s_course_instructor":
      case "field_s_course_term":
      case "field_s_course_location":
      case "field_s_course_section_year":
      case "field_s_course_section_class_id":
      case "field_s_course_co_person":
      case "field_s_course_dow":
      case "field_s_course_time":
      case "field_s_course_time_end":
      case "field_s_course_section_number":
      case "field_s_course_location":
      case "field_s_course_units":
      case "field_s_course_enrollment_curr":
      case "field_s_course_enrollment_max":
      case "field_department_consent":
      case "field_actual_enrollment":
        $field_collection_item->{$sub_target}[LANGUAGE_NONE] = array();
        break;
    }
  }
}

