<?php

/**
 * @file
 * Code for the Stanford Paragraph Types Dynamic feature.
 */

include_once 'stanford_paragraph_types_dynamic.features.inc';

/**
 * Implements hook_theme().
 */
function stanford_paragraph_types_dynamic_theme($existing, $type, $theme, $path) {
  return stanford_paragraph_types_theme_templates($existing, 'stanford_paragraph_types_dynamic');
}

/**
 * Implements hook_preprocess_field().
 */
function stanford_paragraph_types_dynamic_preprocess_field(&$vars) {
  if ($vars['element']['#field_name'] == 'field_p_views_view') {
    $items = count($vars['items']);
    if ($items <= 6) {
      $class = 'span' . floor(12 / $items);
    }
    else {
      $class = 'span2';
    }
    $vars['item_class'] = $class;
  }
}

/**
 * Implements hook_field_attach_form().
 */
function stanford_paragraph_types_dynamic_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  foreach (element_children($form) as $field_name) {
    if ($instance = field_info_instance($entity_type, $field_name, $form['#bundle'])) {
      // Add remove button to multiple selects widget.
      if ($instance['widget']['type'] == 'multiple_selects') {
        foreach (element_children($form[$field_name][LANGUAGE_NONE]) as $delta) {

          $element = &$form[$field_name][LANGUAGE_NONE][$delta];
          if (isset($element['#type']) && $element['#type'] == 'submit') {
            continue;
          }

          $parents = $element['#field_parents'];
          $parents[] = $field_name;
          $parents[] = LANGUAGE_NONE;
          $parents[] = $delta;

          $parents = implode('_', $parents);
          $element['remove_button'] = array(
            '#delta' => $delta,
            '#name' => $parents . '_remove_button',
            '#type' => 'submit',
            '#value' => t('Remove'),
            '#validate' => array(),
            '#submit' => array('stanford_paragraph_types_link_remove_submit'),
            '#limit_validation_errors' => array(),
            '#weight' => 1000,
            '#ajax' => array(
              'effect' => 'fade',
              'callback' => 'stanford_paragraph_types_link_remove_callback',
              'wrapper' => $form[$field_name][LANGUAGE_NONE]['add_more']['#ajax']['wrapper'],
            ),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_entity_paragraphs_item().
 */
function stanford_paragraph_types_dynamic_preprocess_entity(&$vars) {
  if ($vars['elements']['#entity_type'] == 'paragraphs_item') {
    $entity = $vars['elements']['#entity'];
    switch ($entity->bundle) {
      case 'p_views':
        $vars['classes_array'][] = 'span12';
        $vars['classes_array'][] = 'center';
        break;
    }
  }
}

/**
 * Implements hook_menu().
 *
 * @see field_ui_menu()
 */
function stanford_paragraph_types_dynamic_menu() {
  $items = array();
  foreach (entity_get_info() as $entity_type => $entity_info) {
    if (!$entity_info['fieldable']) {
      continue;
    }

    foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
      if (!isset($bundle_info['admin'])) {
        continue;
      }

      // Extract path information from the bundle.
      $path = $bundle_info['admin']['path'];

      if (isset($bundle_info['admin']['bundle argument'])) {
        $bundle_arg = $bundle_info['admin']['bundle argument'];
        $bundle_pos = (string) $bundle_arg;
      }
      else {
        $bundle_arg = $bundle_name;
        $bundle_pos = '0';
      }

      $field_position = count(explode('/', $path)) + 1;

      $access = array_intersect_key($bundle_info['admin'], drupal_map_assoc(array(
        'access callback',
        'access arguments',
      )));
      $access += array(
        'access callback' => 'user_access',
        'access arguments' => array('administer fields'),
      );

      $items["$path/fields/%stanford_paragraph_types_dynamic_menu/blockreference-option-permission"] = array(
        'load arguments' => array(
          $entity_type,
          $bundle_arg,
          $bundle_pos,
          '%map',
        ),
        'title' => 'Option Permissions',
        'page callback' => 'drupal_get_form',
        'page arguments' => array(
          'stanford_paragraph_types_dynamic_option_permission',
          $field_position,
        ),
        'type' => MENU_LOCAL_TASK,
      );
      $items["$path/fields/%stanford_paragraph_types_dynamic_menu/blockreference-option-permission"] += $access;
    }
  }

  return $items;
}

/**
 * Form callback for blockreference field option permissions.
 */
function stanford_paragraph_types_dynamic_option_permission($form, $form_state, $field) {
  $entity_type = $field['entity_type'];
  $bundle = $field['bundle'];
  $field_name = $field['field_name'];

  $settings = variable_get("stanford_parargraph_types_dynamic-$entity_type-$bundle-$field_name", array(
    'roles' => array(),
    'options' => array(),
  ));
  $instance = field_info_instance($entity_type, $field_name, $bundle);
  $options = blockreference_options_list(NULL, $instance, NULL, NULL);

  $form = array();

  $form['instance']['settings']['roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Roles'),
    '#description' => t('Limit the options to particular roles. Leave empty to allow all options to all roles.'),
    '#options' => user_roles(),
    '#default_value' => $settings['roles'],
  );
  $form['instance']['settings']['options'] = array(
    '#type' => 'select',
    '#title' => t('Limit Options'),
    '#description' => t('Select the options to display to the selected roles above.'),
    '#options' => $options,
    '#default_value' => $settings['options'],
    '#multiple' => TRUE,
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));

  return $form;
}

/**
 * Form submit for blockreference field option permissions.
 */
function stanford_paragraph_types_dynamic_option_permission_submit($form, &$form_state) {
  $entity_type = $form_state['build_info']['args'][0]['entity_type'];
  $field_name = $form_state['build_info']['args'][0]['field_name'];
  $bundle = $form_state['build_info']['args'][0]['bundle'];
  $variable = array(
    'roles' => array_filter($form_state['values']['roles']),
    'options' => $form_state['values']['options'],
  );
  variable_set("stanford_parargraph_types_dynamic-$entity_type-$bundle-$field_name", $variable);
  drupal_set_message(t('Settings Saved'));
}

/**
 * Implements hook_field_delete_instance().
 */
function stanford_paragraph_types_dynamic_field_delete_instance($instance) {
  $entity_type = $instance['entity_type'];
  $bundle = $instance['bundle'];
  $field_name = $instance['field_name'];
  variable_del("stanford_parargraph_types_dynamic-$entity_type-$bundle-$field_name");
}

/**
 * Menu loader; Load a field instance based on field and bundle name.
 *
 * @param string $field_name
 *   The name of the field, as contained in the path.
 * @param string $entity_type
 *   The name of the entity.
 * @param string $bundle_name
 *   The name of the bundle, as contained in the path.
 * @param int $bundle_pos
 *   The position of $bundle_name in $map.
 * @param array $map
 *   The translated menu router path argument map.
 *
 * @return bool|array
 *   The field instance array.
 *
 * @see field_ui_menu_load()
 */
function stanford_paragraph_types_dynamic_menu_load($field_name, $entity_type, $bundle_name, $bundle_pos, $map) {
  // Extract the actual bundle name from the translated argument map.
  // The menu router path to manage fields of an entity can be shared among
  // multiple bundles. For example:
  // - admin/structure/types/manage/%node_type/fields/%field_ui_menu
  // - admin/structure/types/manage/%comment_node_type/fields/%field_ui_menu
  // The menu system will automatically load the correct bundle depending on the
  // actual path arguments, but this menu loader function only receives the node
  // type string as $bundle_name, which is not the bundle name for comments.
  // We therefore leverage the dynamically translated $map provided by the menu
  // system to retrieve the actual bundle and bundle name for the current path.
  if ($bundle_pos > 0) {
    $bundle = $map[$bundle_pos];
    $bundle_name = field_extract_bundle($entity_type, $bundle);
  }
  // Check whether the field exists at all.
  if ($field = field_info_field($field_name)) {
    // We only want block reference fields.
    if ($field['type'] !== 'blockreference') {
      return FALSE;
    }
    // Only return the field if a field instance exists for the given entity
    // type and bundle.
    if ($instance = field_info_instance($entity_type, $field_name, $bundle_name)) {
      return $instance;
    }
  }
  return FALSE;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function stanford_paragraph_types_dynamic_field_widget_form_alter(&$element, &$form_state, $context) {
  if ($context['field']['type'] != 'blockreference') {
    return;
  }
  global $user;

  $entity_type = $context['instance']['entity_type'];
  $bundle = $context['instance']['bundle'];
  $field_name = $context['instance']['field_name'];
  $limits = variable_get("stanford_parargraph_types_dynamic-$entity_type-$bundle-$field_name", array());

  // If no roles are limited, user doesn't have the limited roles, or the
  // field wiget is not a select list, we can exit.
  if (!$limits ||
    !$limits['roles'] ||
    !array_intersect_key(array_filter($limits['roles']), $user->roles) ||
    $context['instance']['widget']['type'] == 'blockreference_autocomplete'
  ) {
    return;
  }

  // Multiple selects module changes the form element.
  if ($context['instance']['widget']['type'] == 'multiple_selects') {
    _stanford_paragraph_types_dynamic_alter_form_component($element['moddelta'], $limits);
  }
  else {
    _stanford_paragraph_types_dynamic_alter_form_component($element, $limits);
  }

}

/**
 * Alter the form component for blockrefence fields.
 *
 * @param array $component
 *   Form API Component.
 * @param array $limits
 *   Keyed array of roles and options to limit the field.
 */
function _stanford_paragraph_types_dynamic_alter_form_component(&$component, $limits) {
  // Cardinality is greater than 1.
  if (is_array($component['#default_value'])) {
    foreach ($component['#default_value'] as $value) {
      if (!isset($limits['options'][$value])) {
        $component['#attributes']['disabled'] = TRUE;
      }
    }
  }
  // Cardinality is 1.
  elseif (is_string($component['#default_value']) && !in_array($component['#default_value'], $limits['options'])) {
    $component['#attributes']['disabled'] = TRUE;
  }

  // If the widget is not disabled, limit the available options to the user.
  // Don't limit options if an admin has already selected some appropriate
  // options. If we did that, it would erase what the admin set.
  if (empty($component['#attributes']['disabled']) || !$component['#attributes']['disabled']) {
    $component['#options'] = array_intersect_key($component['#options'], $limits['options']);
  }
}
