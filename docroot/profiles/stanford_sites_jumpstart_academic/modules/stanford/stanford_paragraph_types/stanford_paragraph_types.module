<?php

/**
 * @file
 * Code for the Stanford Paragraph Types feature.
 */

include_once 'stanford_paragraph_types.features.inc';

/**
 * Implements hook_theme().
 */
function stanford_paragraph_types_theme($existing, $type, $theme, $path) {
  return stanford_paragraph_types_theme_templates($existing, 'stanford_paragraph_types');
}

/**
 * Add template options for fields and paragraph bundles for specified module.
 *
 * @param mixed $existing
 *   Array of existing theme items.
 * @param string $module_name
 *   Name of the module to collect templates from.
 *
 * @return array
 *   New template options for fields and paragraph bundles.
 */
function stanford_paragraph_types_theme_templates($existing, $module_name) {
  $theme = array();
  $module_path = drupal_get_path('module', $module_name);
  $info = system_get_info('module', $module_name);

  $field = $existing['field'];
  $field['theme path'] = $module_path;
  $field['path'] = "$module_path/theme";
  unset($field['function']);

  // Adds templates for fields but allow them to be overridden in the theme.
  foreach ($info['features']['field_instance'] as $instance) {

    list(, $bundle, $field_name) = explode('-', $instance);
    // Various template patterns for the field.
    $patterns = array("field__$field_name", "field__{$field_name}__{$bundle}");

    foreach ($patterns as $pattern) {
      $field['template'] = str_replace('_', '-', $pattern);
      // Check if the file exists in this module.
      if (file_exists($field['path'] . "/{$field['template']}.tpl.php")) {
        $theme[$pattern] = $field;
      }
    }
  }

  // Adds templates for paragraph item entities but allow them to be overridden
  // in the theme.
  $paragraph = $existing['paragraphs_item'];
  unset($paragraph['includes'], $paragraph['file']);

  foreach ($info['features']['paragraphs'] as $bundle) {
    $patterns = array("paragraphs_item__$bundle");
    foreach ($patterns as $pattern) {
      $my_paragraph = array(
        'template' => str_replace('_', '-', $pattern),
        'theme path' => $module_path,
        'path' => "$module_path/theme",
      );

      if (file_exists("{$my_paragraph['path']}/{$my_paragraph['template']}.tpl.php")) {
        $theme[$pattern] = array_merge($paragraph, $my_paragraph);
      }
    }
  }

  return $theme;
}

/**
 * Implements hook_preprocess_entity().
 *
 * Apply classes to certain paragraph entities & alter the field collection
 * within the Teaser Cards paragraph type.
 */
function stanford_paragraph_types_preprocess_entity(&$vars) {
  $function = '_stanford_paragraph_types_preprocess_entity_' . $vars['entity_type'];
  if (function_exists($function)) {
    $function($vars);
  }
}

/**
 * Helper for stanford_paragraph_types_preprocess_entity().
 *
 * Field Collection items.
 */
function _stanford_paragraph_types_preprocess_entity_field_collection_item(&$vars) {
  $entity = $vars['field_collection_item'];

  switch ($entity->field_name) {
    case 'field_p_cards_card':
      if (isset($vars['field_p_card_image'])) {
        if ($color = field_get_items('field_collection_item', $entity, 'field_p_card_color')) {
          $color = $color[0]['value'];

          if ($pattern = field_get_items('field_collection_item', $entity, 'field_p_card_pattern')) {
            $pattern = $pattern[0]['value'];
          }
          $vars['classes_array'][] = "color-$color";
          $vars['classes_array'][] = "pattern-$pattern";
        }

        // Depending what the user wants to use as the CTA link, hide the
        // unwanted field.
        if ($vars['field_collection_item']->field_p_card_action_button[LANGUAGE_NONE][0]['value'] == 'link') {
          unset($vars['content']['field_p_card_file']);
        }
        else {
          unset($vars['content']['field_p_card_cta']);
        }

        if ($vars['field_collection_item']->field_p_card_hide_cta[LANGUAGE_NONE][0]['value']) {
          unset($vars['content']['field_p_card_cta']);
          unset($vars['content']['field_p_card_file']);
        }
      }
      break;

    case 'field_p_icon_columns':
      $color = field_get_items('field_collection_item', $entity, 'field_p_icon_color');
      $vars['classes_array'][] = 'color-' . $color[0]['value'];
      break;
  }
}

/**
 * Implements hook_entity_view().
 */
function stanford_paragraph_types_entity_view($entity, $type, $view_mode, $langcode) {
  if ($type == 'paragraphs_item') {
    $entity->content['#attached']['css'][] = drupal_get_path('module', 'stanford_paragraph_types') . '/css/stanford_paragraph_types.css';
    // Add specific style sheet if it exists.
    $css_file = drupal_get_path('module', 'stanford_paragraph_types') . '/css/stanford_paragraph_types_' . $entity->bundle . '.css';
    if (file_exists($css_file)) {
      $entity->content['#attached']['css'][] = $css_file;
    }
  }
}

/**
 * Helper for stanford_paragraph_types_preprocess_entity().
 *
 * Paragraph items.
 */
function _stanford_paragraph_types_preprocess_entity_paragraphs_item(&$vars) {
  $info = system_get_info('module', 'stanford_paragraph_types');
  $entity = $vars['elements']['#entity'];

  // Adds to push following Paragraph Items down.
  $vars['classes_array'][] = 'clearfix';

  switch ($entity->bundle) {
    case 'p_hero':
      // Adds class to tell where the overlay should live.
      $classes = explode(' ', $entity->field_p_hero_alignment[LANGUAGE_NONE][0]['value']);
      foreach ($classes as $class) {
        $vars['classes_array'][] = $class;
      }

      // If the style is not "both" unset the unwanted field.
      $style = $entity->field_p_hero_style[LANGUAGE_NONE][0]['value'];
      if ($style == 'image') {
        unset($vars['content']['field_p_hero_video']);
      }
      elseif ($style == 'video') {
        unset($vars['content']['field_p_hero_image']);
      }

      break;

    case 'p_callout':
      $color_items = field_get_items('paragraphs_item', $vars['paragraphs_item'], 'field_p_callout_color');
      if ($color_items) {
        $color = $color_items[0]['value'];
        $vars['classes_array'][] = 'color-background';
        $vars['classes_array'][] = $color;
      }
      break;

    default:
      // Other paragraph types that should be centered and not full width.
      if (in_array($entity->bundle, $info['features']['paragraphs'])) {
        $vars['classes_array'][] = 'span12';
        $vars['classes_array'][] = 'center';
      }
      break;
  }
  $vars['attributes_array'] = array_filter($vars['attributes_array']);
}

/**
 * Implements hook_preprocess_block().
 */
function stanford_paragraph_types_preprocess_block(&$vars) {
  if (isset($vars['elements']['#blockreference_element'])) {

    // Change span* classes so the block will be 100% of the field area for
    // blockreference field rendered blocks.
    array_walk($vars['classes_array'], function (&$array) {
      $array = preg_replace("/span[1-9]/", "reference-$0", $array);
    });
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function stanford_paragraph_types_field_widget_form_alter(&$element, &$form_state, $context) {
  if (isset($element['#field_name']) && $element['#field_name'] == 'field_p_menu_menu') {
    if (!module_exists('menu_block')) {
      return;
    }

    // Find the menu block that has the correct config and use that as the
    // default value in the field.
    $blocks = menu_block_block_info();
    foreach (array_keys($blocks) as $delta) {
      $config = menu_block_get_config($delta);
      if ($config['level'] == 2 && $config['depth'] == 3) {
        $element['#default_value'][0] = "menu_block:$delta";
      }
    }
  }
}

/**
 * Implements hook_preprocess_entity().
 */
function stanford_paragraph_types_preprocess_field(&$vars) {
  $function = '_stanford_paragraph_types_preprocess_field_' . $vars['element']['#field_name'];
  if (function_exists($function)) {
    $function($vars);
  }
}

/**
 * Helper for stanford_paragraph_types_preprocess_field().
 */
function _stanford_paragraph_types_preprocess_field_field_p_cards_card(&$vars) {
  // Sets a class depending how many items exist.
  $class = count($vars['items']) == 2 ? 'span6' : 'span4';
  foreach ($vars['items'] as &$item) {
    $item['#attributes']['class'][] = $class;
  }
}

/**
 * Helper for stanford_paragraph_types_preprocess_field().
 */
function _stanford_paragraph_types_preprocess_field_field_p_card_image(&$vars) {
  // Change the image's link based on configured fields.
  $object = $vars['element']['#object'];
  unset($vars['items'][0]['#path']);

  if ($object->field_p_card_action_button[LANGUAGE_NONE][0]['value'] == 'file') {
    // File Link Type.
    if (!empty($object->field_p_card_file)) {
      // File field is populated.
      $vars['items'][0]['#path']['path'] = file_create_url($object->field_p_card_file[LANGUAGE_NONE][0]['uri']);
    }
  }
  else {
    // Normal Link Type.
    if (!empty($object->field_p_card_cta)) {
      // CTA field is populated.
      $vars['items'][0]['#path']['path'] = $vars['element']['#object']->field_p_card_cta[LANGUAGE_NONE][0]['url'];
    }
  }
}

/**
 * Helper for stanford_paragraph_types_preprocess_field().
 */
function _stanford_paragraph_types_preprocess_field_field_p_card_file(&$vars) {
  // Make a simple link from the href and add btn class to tag instead of
  // the normal display mode.
  foreach ($vars['element']['#items'] as $delta => $item) {
    if (!empty($item['description'])) {
      $title = $item['description'];
    }
    else {
      $title = $item['filename'];
    }
    $vars['items'][$delta]['#markup'] = l($title, file_create_url($item['uri']), array('attributes' => array('class' => array('btn'))));
  }
}

/**
 * Helper for stanford_paragraph_types_preprocess_field().
 */
function _stanford_paragraph_types_preprocess_field_field_p_hero_video(&$vars) {
  drupal_add_js(drupal_get_path('module', 'stanford_paragraph_types') . '/js/stanford_paragraph_types.js');
}

/**
 * Helper for stanford_paragraph_types_preprocess_field().
 */
function _stanford_paragraph_types_preprocess_field_field_p_icon_columns(&$vars) {
  $offset = 0;
  // If not a multiple of 3, set the offset to center the field item.
  if (count($vars['items']) % 3) {
    $offset = -2 * (count($vars['items']) % 3 - 3);
  }

  foreach ($vars['items'] as $delta => &$item) {
    $item['#attributes']['class'][] = 'span4';

    // Sets the offset to the first item of the last group of 3. Ex:
    // 1 or 2 items - the very first will get the offset. 4 or 5 - the 4th
    // item will get the offset and so on.
    if ($offset && !($delta % 3) && count($vars['items']) - $delta < 3) {
      $item['#attributes']['class'][] = "offset$offset";
    }
  }
}

/**
 * Implements hook_entity_view_mode_alter().
 */
function stanford_paragraph_types_entity_view_mode_alter(&$view_mode, $context) {
  $entity = $context['entity'];
  switch ($context['entity_type']) {
    case 'paragraphs_item':

      switch ($entity->bundle) {
        case 'p_wysiwyg':

          if (!empty($entity->field_p_wysiwyg_button) || !empty($entity->field_p_wysiwyg_image)) {
            $view_mode = 'default';
          }

          break;
      }
      break;

    case 'field_collection_item':

      switch ($entity->field_name) {
        case 'field_p_icon_columns':

          if (empty($entity->field_p_icon_image)) {
            $view_mode = 'default';
          }

          break;
      }
      break;
  }
}

/**
 * Implements hook_field_group_pre_render().
 */
function stanford_paragraph_types_field_group_pre_render(&$element, $group, &$form) {

  if ($group->entity_type == 'paragraphs_item') {
    // All paragraph types only on the edit form.
    if (!$group->parent_name && !isset($form['#theme'])) {
      // Collapse top level field groups to make UI slimmer if editing.
      $field_instances = field_info_instances($group->entity_type, $group->bundle);
      foreach (array_keys($field_instances) as $field_name) {
        if (!empty($form['#entity']->{$field_name}) && !empty($form['#entity']->{$field_name}[LANGUAGE_NONE])) {
          $group->format_settings['formatter'] = 'collapsed';
        }
      }
    }

    $function = '_stanford_paragraph_types_field_group_pre_render_' . $group->bundle;
    if (function_exists($function)) {
      $function($element, $group, $form);
    }
  }
}

/**
 * Helper for stanford_paragraph_types_field_group_pre_render().
 *
 * WYSIWYG Items: Moves button to a different group if image is empty.
 */
function _stanford_paragraph_types_field_group_pre_render_p_wysiwyg(&$element, $group, &$form) {
  $entity = $form['#entity'];

  if (!empty($entity->field_p_wysiwyg_image) && !empty($entity->field_p_wysiwyg_button)) {
    if ($group->group_name == 'group_left_column') {
      $element['field_p_wysiwyg_button'] = $form['field_p_wysiwyg_button'];
    }
    if ($group->group_name == 'group_right_column') {
      unset($element['field_p_wysiwyg_button']);
    }
    return;
  }
}

/**
 * Helper for stanford_paragraph_types_field_group_pre_render().
 *
 * Menu Item: If left column is empty, remove the span9 class.
 */
function _stanford_paragraph_types_field_group_pre_render_p_menu(&$element, $group, &$form) {
  // Menu Paragraph Type.
  if ($group->group_name == 'group_menu_main') {
    $left_column = $form['group_menu_column'];

    // Removes span9 from classes if left column does not have anything in the
    // left sidebar fields.
    if (empty($left_column['group_sidebar']['field_p_menu_menu'])) {
      $classes = explode(' ', $group->format_settings['instance_settings']['classes']);
      $pos = array_search('span9', $classes);
      unset($classes[$pos]);
      $group->format_settings['instance_settings']['classes'] = implode(' ', $classes);
    }
  }
}

/**
 * Implements hook_field_attach_form().
 */
function stanford_paragraph_types_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  if ($entity_type == 'paragraphs_item') {
    $form['#attached']['css'][] = drupal_get_path('module', 'stanford_paragraph_types') . '/css/stanford_paragraph_types.admin.css';
    $form['#attached']['js'][] = drupal_get_path('module', 'stanford_paragraph_types') . '/js/stanford_paragraph_types.admin.js';

    $function = '_stanford_paragraph_types_field_attach_form_' . $form['#bundle'];
    if (function_exists($function)) {
      $function($entity_type, $entity, $form, $form_state, $langcode);
    }
  }
}

/**
 * Helper function for stanford_paragraph_types_field_attach_form().
 *
 * On Teaser Cards: Prevent the user from adding more than 3 cards.
 */
function _stanford_paragraph_types_field_attach_form_p_cards($entity_type, $entity, &$form, &$form_state, $langcode) {
  if (count(element_children($form['field_p_cards_card'][LANGUAGE_NONE])) >= 4) {
    unset($form['field_p_cards_card'][LANGUAGE_NONE]['add_more']);
  }
}

/**
 * Helper function for stanford_paragraph_types_field_attach_form().
 *
 * For Buttons: Add remove button on link field.
 *
 * @see https://www.drupal.org/node/905492#comment-11553141
 */
function _stanford_paragraph_types_field_attach_form_p_buttons($entity_type, $entity, &$form, &$form_state, $langcode) {
  foreach (element_children($form['field_p_buttons_button'][LANGUAGE_NONE]) as $delta) {
    $item = &$form['field_p_buttons_button'][LANGUAGE_NONE][$delta];
    if ($item['#type'] == 'link_field') {
      $language = $form['#language'];
      $parents = array('field_p_buttons_button', $language, $delta);

      $item['remove_button'] = array(
        '#delta' => $delta,
        '#name' => implode('_', $parents) . '_remove_button',
        '#type' => 'submit',
        '#value' => t('Remove'),
        '#validate' => array(),
        '#submit' => array('stanford_paragraph_types_link_remove_submit'),
        '#limit_validation_errors' => array(),
        '#weight' => 1000,
        '#ajax' => array(
          'effect' => 'fade',
          'callback' => 'stanford_paragraph_types_link_remove_callback',
          'wrapper' => $form['field_p_buttons_button'][LANGUAGE_NONE]['add_more']['#ajax']['wrapper'],
        ),
      );
    }
  }
}

/**
 * Helper function for stanford_paragraph_types_field_attach_form().
 *
 * For Menu W/ Text Area: Disables the menu block reference field from editing.
 */
function _stanford_paragraph_types_field_attach_form_p_menu($entity_type, $entity, &$form, &$form_state, $langcode) {
  $element = &$form['field_p_menu_menu'][LANGUAGE_NONE];
  if (!empty($element['#default_value'])) {
    $default = reset($element['#default_value']);
    if (array_key_exists($default, $element['#options'])) {
      $element['#attributes']['disabled'] = TRUE;
    }
  }
}

/**
 * Implements hook_field_attach_validate().
 */
function stanford_paragraph_types_field_attach_validate($entity_type, $entity, &$errors) {
  if ($entity_type != 'paragraphs_item') {
    return;
  }
  $function = '_stanford_paragraph_types_field_attach_validate_' . $entity->bundle;
  if (function_exists($function)) {
    $function($entity_type, $entity, $errors);
  }
}

/**
 * Helper for stanford_paragraph_types_field_attach_validate().
 *
 * If the hero is set to display only the image or only the video, validate
 * that the appropriate field is populated.
 */
function _stanford_paragraph_types_field_attach_validate_p_hero($entity_type, $entity, &$errors) {

  $style = $entity->field_p_hero_style[LANGUAGE_NONE][0]['value'];
  $images = field_get_items($entity_type, $entity, 'field_p_hero_image');
  $videos = field_get_items($entity_type, $entity, 'field_p_hero_video');

  if (($style == 'image' || $style == 'both') && (!$images || !$images[0]['fid'])) {
    $errors['field_p_hero_image'][LANGUAGE_NONE][0][] = array(
      'error' => 'field_example_invalid',
      'message' => t('Image required.'),
    );
  }

  if (($style == 'video' || $style == 'both') && (!$videos || !array_filter($videos[0]))) {
    $errors['field_p_hero_video'][LANGUAGE_NONE][0][] = array(
      'error' => 'field_example_invalid',
      'message' => t('Video Required.'),
    );
  }
}

/**
 * Remove link submit handler.
 *
 * @see https://www.drupal.org/node/905492#comment-11553141
 */
function stanford_paragraph_types_link_remove_submit($form, &$form_state) {
  // Determine which delta the 'Remove' button was triggered.
  $button = $form_state['triggering_element'];
  $delta = $button['#delta'];

  $address = array_slice($button['#array_parents'], 0, -2);

  $parent_element = drupal_array_get_nested_value($form, $address);
  $field_name = $parent_element['#field_name'];
  $langcode = $parent_element['#language'];
  $parents = $parent_element['#field_parents'];

  $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);

  for ($i = $delta; $i <= $field_state['items_count']; $i++) {
    $old_element_address = array_merge($address, array($i + 1));
    $new_element_address = array_merge($address, array($i));

    $moving_element = drupal_array_get_nested_value($form, $old_element_address);
    $moving_element_value = drupal_array_get_nested_value($form_state['values'], $old_element_address);
    $moving_element_input = drupal_array_get_nested_value($form_state['input'], $old_element_address);
    $moving_element_field = drupal_array_get_nested_value($form_state['field']['#parents'], $old_element_address);

    // Tell the element where it's being moved to.
    $moving_element['#parents'] = $new_element_address;

    // Move the element around.
    form_set_value($moving_element, $moving_element_value, $form_state);
    drupal_array_set_nested_value($form_state['input'], $moving_element['#parents'], $moving_element_input);
    drupal_array_set_nested_value($form_state['field']['#parents'], $moving_element['#parents'], $moving_element_field);

    // Move the entity in our saved state.
    if (isset($field_state['entity'][$i + 1])) {
      $field_state['entity'][$i] = $field_state['entity'][$i + 1];
    }
    else {
      unset($field_state['entity'][$i]);
    }
  }

  // Replace the deleted entity with an empty one. This helps to ensure that
  // trying to add a new entity won't ressurect a deleted entity
  // from thev trash bin.
  // $count = count($field_state['entity']);
  // Then remove the last item. But we must not go negative.
  if ($field_state['items_count'] > 0) {
    $field_state['items_count']--;
  }

  // Fix the weights. Field UI lets the weights be in a range of
  // (-1 * item_count) to (item_count). This means that when we remove one,
  // the range shrinks; weights outside of that range then get set to
  // the first item in the select by the browser, floating them to the top.
  // We use a brute force method because we lost weights on both ends
  // and if the user has moved things around, we have to cascade because
  // if I have items weight weights 3 and 4, and I change 4 to 3 but leave
  // the 3, the order of the two 3s now is undefined and may not match what
  // the user had selected.
  $input = drupal_array_get_nested_value($form_state['input'], $address);
  // Sort by weight.
  uasort($input, '_field_sort_items_helper');

  // Reweight everything in the correct order.
  $weight = -1 * $field_state['items_count'];
  foreach ($input as $key => $item) {
    if ($item) {
      $input[$key]['_weight'] = $weight++;
    }
  }
  drupal_array_set_nested_value($form_state['input'], $address, $input);
  field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);

  $form_state['rebuild'] = TRUE;
}

/**
 * Remove button callback.
 *
 * @see https://www.drupal.org/node/905492#comment-11553141
 */
function stanford_paragraph_types_link_remove_callback($form, &$form_state) {
  $button = $form_state['triggering_element'];

  // Go one level up in the form, to the widgets container.
  $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -2));
  $field_name = $element['#field_name'];
  $langcode = $element['#language'];
  $parents = $element['#field_parents'];

  $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);

  $field = $field_state['field'];
  if ($field['cardinality'] != FIELD_CARDINALITY_UNLIMITED) {
    return;
  }

  return $element;
}
