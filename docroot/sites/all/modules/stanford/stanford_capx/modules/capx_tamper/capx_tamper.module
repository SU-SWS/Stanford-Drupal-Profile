<?php

/**
 * @file
 * CAPx Tamper Module.
 */

include_once 'views/capx_tamper.views_default_alter.inc';

use \CAPx\Drupal\Util\CAPx;
use \CAPx\Drupal\Entities\CFEntity;
use \CAPx\Drupal\Mapper\EntityMapper;

define('CAPX_TAMPER', 'admin/config/capx/mapper');

/**
 * Implements hook_ctools_plugin_api().
 */
function capx_tamper_ctools_plugin_api($owner, $api) {
  if ($owner == 'mymodule' && $api == 'capx_tamper') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_theme().
 */
function capx_tamper_theme($existing, $type, $theme, $path) {
  return array(
    'capx_tamper_list_form' => array(
      'render element' => 'form',
      'file' => 'capx_tamper.theme.inc',
    ),
  );
}

/**
 * Implements hook_views_data_alter().
 */
function capx_tamper_views_data_alter(&$data) {
  // Tampers link.
  $data['capx_cfe']['tamper_link'] = array(
    'title' => t('Manage Tampers link'),
    'help' => t('Manage Tampers link for mappings'),
    'field' => array(
      'handler' => 'views_handler_tamper_link',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function capx_tamper_menu() {
  $items = array();

  $items[CAPX_TAMPER . '/%capx_tamper_mapper/tamper'] = array(
    'title' => 'Tampers',
    'page callback' => 'capx_tamper_build_form',
    'page arguments' => array('list', 4),
    'file' => 'capx_tamper.forms.inc',
    'access arguments' => array('administer capx'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items[CAPX_TAMPER . '/%capx_tamper_mapper/tamper/add/%'] = array(
    'title' => 'Add Tamper',
    'page callback' => 'capx_tamper_build_form',
    'page arguments' => array(6, 4, 7),
    'file' => 'capx_tamper.forms.inc',
    'access arguments' => array('administer capx'),
    'type' => MENU_CALLBACK,
  );

  $items[CAPX_TAMPER . '/%capx_tamper_mapper/tamper/%/edit'] = array(
    'title' => 'Tampers',
    'page callback' => 'capx_tamper_build_form',
    'page arguments' => array(7, 4, 6),
    'file' => 'capx_tamper.forms.inc',
    'access arguments' => array('administer capx'),
    'type' => MENU_CALLBACK,
  );

  $items[CAPX_TAMPER . '/%capx_tamper_mapper/tamper/%/delete'] = array(
    'title' => 'Tampers',
    'page callback' => 'capx_tamper_build_form',
    'page arguments' => array(7, 4, 6),
    'file' => 'capx_tamper.forms.inc',
    'access arguments' => array('administer capx'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Loader for menu & pages.
 *
 * @param string $mapper_id
 *   Machine name of the Capx Mapper.
 *
 * @return \CAPx\Drupal\Entities\CFEntity
 *   CAPx Mapper.
 */
function capx_tamper_mapper_load($mapper_id) {
  $mapper = capx_cfe_load_by_machine_name($mapper_id, 'mapper');
  return $mapper;
}

/**
 * Takes the configurations of the CAPx Mapper and gives the available sources.
 *
 * @param CFEntity $mapper
 *   CAPx Mapper to collect available sources.
 *
 * @return array
 *   Associative array of keys as json paths. Values as an array of targets.
 */
function capx_tamper_get_mapper_sources(CFEntity $mapper) {
  $sources = $mapper->properties;
  foreach ($mapper->fields as $field_key => $field_settings) {
    $field_settings = array_filter($field_settings);
    if ($field_settings) {
      $path = $field_settings[key($field_settings)];
      $sources[$field_key] = $path;
    }
  }
  return $sources;
}

/**
 * Implements hook_entity_load().
 */
function capx_tamper_entity_load($entities, $type) {
  if ($type == 'capx_cfe') {
    foreach ($entities as &$entity) {
      if ($entity->type == 'mapper') {
        $entity->tampers = capx_tamper_load_tampers(array('mapper' => $entity->machine_name));
      }
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function capx_tamper_entity_insert($entity, $type) {
  if ($type == 'capx_cfe' && $entity->type == 'mapper' && isset($entity->tampers)) {
    /** @var CFEntity $entity */
    foreach ($entity->tampers as $tamper) {
      $tamper = (array) $tamper;
      $tamper['mapper'] = $entity->machine_name;
      capx_tamper_save_instance($tamper);
    }
  }
}

/**
 * Implements hook_entity_update().
 *
 * If the source does not exist after saving the mapper, delete any CAPx Tamper
 * plugins that are attached.
 */
function capx_tamper_entity_update($entity, $type) {
  if ($type == 'capx_cfe' && $entity->type == 'mapper' && isset($entity->tampers)) {
    /** @var \CAPx\Drupal\Entities\CFEntity $entity */
    $sources = capx_tamper_get_mapper_sources($entity);
    foreach ($entity->tampers as $id => $tamper) {
      if (!isset($sources[$tamper->target]) || $sources[$tamper->target] != $tamper->source) {
        capx_tamper_delete_instance($tamper);
      }
    }
  }
}

/**
 * Implements hook_entity_delete().
 *
 * Deletes any CAPx Tamper plugins when the mapper is deleted.
 */
function capx_tamper_entity_delete($entity, $type) {
  if ($type == 'capx_cfe' && $entity->type == 'mapper' && isset($entity->tampers)) {
    /** @var \CAPx\Drupal\Entities\CFEntity $entity */
    foreach ($entity->tampers as $tamper) {
      capx_tamper_delete_instance($tamper);
    }
  }
}

/**
 * Load a single or all capx tamper plugins.
 *
 * @param array $conditions
 *   Keyed conditions of the tampers to load.
 *   'mapper' => mapper machine name.
 *   'id' => tamper id.
 *   'source' => field name or entity property.
 *
 * @return array
 *   Single or all tampers configured.
 */
function capx_tamper_load_tampers($conditions = array()) {
  $disabled = variable_get('capx_tamper_disabled', array());

  $query = db_select('capx_tamper', 'c')
    ->fields('c');
  foreach ($conditions as $key => $value) {
    if (db_field_exists('capx_tamper', $key)) {
      if (is_array($value)) {
        $query->condition($key, $value, 'IN');
      }
      else {
        $query->condition($key, $value);
      }
    }
  }
  $query->orderBy('weight', 'ASC');
  $results = $query->execute();

  $items = array();
  while ($item = $results->fetchAssoc()) {
    $item['settings'] = unserialize($item['settings']);
    if (isset($disabled[$item['id']])) {
      $item['disabled'] = TRUE;
    }
    $items[] = (object) $item;
  }

  return $items;
}

/**
 * Saves the tamper plugin and settings.
 *
 * @param object|array $tamper
 *   CAPx Tamper object.
 *
 * @return bool
 *   TRUE if successful. FALSE otherwise.
 */
function capx_tamper_save_instance($tamper) {
  $tamper = (array) $tamper;

  // Validity check.
  list($mapper_id) = explode('-', $tamper['id']);
  if ($mapper_id != $tamper['mapper'] || !capx_tamper_mapper_load($mapper_id)) {
    drupal_set_message(t('Invalid CAPx Mapper "%mapper" in tamper plugin "%description"', array(
      '%mapper' => $mapper_id,
      '%description' => $tamper['description'],
    )), 'error');
    return FALSE;
  }

  if (capx_tamper_load_tampers(array('id' => $tamper['id']))) {
    $success = drupal_write_record('capx_tamper', $tamper, 'id');
  }
  else {
    $success = drupal_write_record('capx_tamper', $tamper);
  }
  capx_tamper_invalidate_etags($tamper['mapper']);
  return $success;
}

/**
 * Deletes the given CAPx Tamper plugin.
 *
 * @param object $tamper
 *   CAPx Tamper plugin to delete.
 */
function capx_tamper_delete_instance($tamper) {
  db_delete('capx_tamper')
    ->condition('id', $tamper->id)
    ->condition('mapper', $tamper->mapper)
    ->execute();

  $disabled = variable_get('capx_tamper_disabled', array());
  unset($disabled[$tamper->id]);
  variable_set('capx_tamper_disabled', $disabled);
  capx_tamper_invalidate_etags($tamper->mapper);
}

/**
 * Invalidates etags when a tamper is created, edited, or deleted.
 *
 * @param string $mapper_id
 *   Machine name of the mapper to invalidate.
 */
function capx_tamper_invalidate_etags($mapper_id) {
  /** @var \CAPx\Drupal\Entities\CFEntity $mapper */
  $mapper = capx_tamper_mapper_load($mapper_id);
  CAPx::invalidateEtags('mapper', $mapper);
}

/**
 * Special handler for "Copy To" tamper.
 *
 * Switches it to a "Copy From" and flips the sources.
 *
 * @param object $result
 *   Results object with items property.
 * @param int $item_key
 *   Index of the item. Normally 0.
 * @param string $path
 *   JSON path string.
 * @param mixed $field
 *   String for most field results to manipulate.
 * @param array $settings
 *   CAPx Tamper settings.
 * @param string $source
 *   Original source.
 */
function capx_tamper_feeds_tamper_copy_callback(&$result, &$item_key, &$path, &$field, &$settings, &$source) {
  if ($settings['to_from'] == 'to') {
    $settings['to_from'] = 'from';
    $a = $path;
    $path = $settings['source'];
    $settings['source'] = $a;
  }
}

/**
 * Recursive function, given the object's data array, change a single value.
 *
 * @param array $data
 *   Object array from json response from API.
 * @param string $path
 *   JSON string path to desired value.
 * @param mixed $value
 *   New value to set.
 * @param int $index
 *   For wildcard items, change the correct indexed item.
 */
function capx_tamper_set_data_by_json_path(&$data, $path, $value, $index = 0) {
  $path = trim($path, '$.');

  $paths = explode('.', $path);
  $piece = array_shift($paths);

  // End of path.
  if (!$paths && isset($data[$piece])) {
    $data[$piece] = $value;
    return;
  }

  // Wildcard, replace the piece with the index value.
  if ($piece == '*') {
    $piece = $index;
  }

  if (isset($data[$piece])) {
    capx_tamper_set_data_by_json_path($data[$piece], implode('.', $paths), $value, $index);
  }
}

/**
 * Creates an HTML id/class attribute name.
 *
 * @param string $path
 *   JSON path.
 *
 * @return string
 *   HTML ready id/class converted from the path.
 */
function capx_tamper_table_id($path) {
  $path = trim($path, '$.');
  return preg_replace("/[^A-Za-z0-9 ]/", '-', $path);
}

/**
 * Implements hook_capx_pre_property_set_alter().
 */
function capx_tamper_capx_pre_property_set_alter($entity, &$data, &$property_name) {
  capx_tamper_alter_data($entity, $data, $property_name);
}

/**
 * Implements hook_capx_pre_map_field_alter().
 */
function capx_tamper_capx_pre_map_field_alter(&$entity, &$field_name, &$remote_data_paths, &$data) {
  capx_tamper_alter_data($entity, $data, $field_name);
}

/**
 * Alters the data object as configured from the tampers.
 *
 * @param object $entity
 *   Entity to be operated on.
 * @param array $data
 *   Json data array.
 * @param string $field_name
 *   Field machine name or entity property.
 */
function capx_tamper_alter_data($entity, &$data, $field_name) {
  $e = $entity->raw();
  /** @var EntityMapper $mapper */
  $mapper = $e->capxMapper;
  /** @var CFEntity $cfe_mapper */
  $cfe_mapper = $mapper->getMapper();


  // Sets an object to be used for particular tamper plugins.
  // @see feeds_tamper_copy_callback().
  $result = new stdClass();
  $items = array();
  foreach (capx_tamper_get_mapper_sources($cfe_mapper) as $path) {
    $item = $mapper->getRemoteDataByJsonPath($data, $path);
    if (strpos($path, '*') !== FALSE) {
      $index = $mapper->getIndex();
      if (isset($item[$index])) {
        $item = $item[$index];
      }
    }

    if (is_array($item)) {
      if (array_filter($item)) {
        $item = reset($item);
      }
      else {
        $item = NULL;
      }
    }
    $items[0][$path] = $item;
  }
  $result->items = $items;

  // Loop through tamper plugins on the mapper.
  foreach ($cfe_mapper->tampers as $tamper) {
    if ($tamper->disabled || $tamper->target !== $field_name) {
      continue;
    }
    $plugin = feeds_tamper_get_plugin($tamper->plugin_id);
    if (function_exists($plugin['callback']) && isset($result->items[0][$tamper->source])) {
      $path = $tamper->source;
      $field = &$result->items[0][$path];

      // Call any functions that have to alter the tamper before using
      // the feeds tamper plugin directly.
      $pre_callback = 'capx_tamper_' . $plugin['callback'];
      $key = 0;
      if (function_exists($pre_callback)) {
        $pre_callback($result, $key, $path, $field, $tamper->settings, $tamper->source);
      }
      // Call the feeds tamper. Then set that value back into the data array.
      $plugin['callback']($result, $key, $path, $field, $tamper->settings, $tamper->source);
      capx_tamper_set_data_by_json_path($data, $path, $field, $mapper->getIndex());
    }
  }
}

/**
 * Add a validation function to the import form.
 *
 * @param array $form
 *   Form Array.
 * @param array $form_state
 *   Form State Array.
 */
function capx_tamper_form_stanford_capx_preset_import_form_alter(&$form, &$form_state) {
  $form['#validate'][] = "capx_tamper_form_stanford_capx_preset_import_form_alter_validate";
}

/**
 * Do some validation prior to saving.
 *
 * @param array $form
 *   Form Array.
 * @param array $form_state
 *   Form State Array.
 */
function capx_tamper_form_stanford_capx_preset_import_form_alter_validate($form, &$form_state) {
  $code = $form_state['values']['code'];
  $cfe = entity_import('capx_cfe', $code);

  if (isset($cfe->tampers)) {
    foreach ($cfe->tampers as $tamper) {
      // Validity check.
      list($mapper_id) = explode('-', $tamper['id']);
      if ($mapper_id !== $tamper['mapper'] || $mapper_id !== $cfe->machine_name) {
        form_set_error('code', t('Invalid CAPx Mapper "%mapper" in tamper plugin "%description"', array(
          '%mapper' => $mapper_id,
          '%description' => $tamper['description'],
        )));
      }
    }
  }
}
