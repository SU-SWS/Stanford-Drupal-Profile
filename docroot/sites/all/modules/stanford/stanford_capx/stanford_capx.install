<?php
/**
 * @file
 */

use CAPx\Drupal\Util\CAPxMapper;

/**
 * Implements hook_install().
 */
function stanford_capx_install() {}

/**
 * Implements hook_uninstall().
 */
function stanford_capx_uninstall() {
  variable_del('stanford_capx_batch_limit');
  variable_del('stanford_capx_username');
  variable_del('stanford_capx_password');
  variable_del('stanford_capx_api_base_url');
  variable_del('stanford_capx_api_auth_uri');
  variable_del('stanford_capx_admin_messages');
  variable_del('stanford_capx_token');
  variable_del("capx_last_orgs_sync");
  variable_del("capx_last_schema_sync");
  variable_del("stanford_capx_debug_always_force_etag");
  variable_del("stanford_capx_autotruncate_textfields");
}

/**
 * Implements hook_schema().
 */
function stanford_capx_schema() {
  $schema = array();

  // Profile Information Table.
  $schema['capx_profiles'] = array(
    'description' => 'CAPx Profile Information.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for this table.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'entity_type' => array(
        'description' => 'The entity type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'bundle_type' => array(
        'description' => 'The bundle type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'importer' => array(
        'description' => 'The importer machine name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'entity_id' => array(
        'description' => 'The entity ID.',
        'type' => 'int',
        'default' => 0,
      ),
      'profile_id' => array(
        'description' => 'The profile ID from CAP.',
        'type' => 'int',
        'default' => 0,
      ),
      'etag' => array(
        'description' => 'Etag.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'guuid' => array(
        'description' => 'A guuid that is not the profile id. Used for multiple creation.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'sync' => array(
        'description' => 'Does this profile needs to be synced?',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 1,
        'size' => 'tiny',
      ),
      'orphaned' => array(
        'description' => 'Wether or not the profile has been orphaned',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'last_sync' => array(
        'description' => 'The last time this profile was successfully updated.',
        'type' => 'int',
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'bep' => array('bundle_type', 'entity_id', 'profile_id'),
      'iep' => array('importer', 'entity_id', 'profile_id'),
    ),
  );

  // Configuration Entity.
  $schema['capx_cfe'] = array(
    'description' => 'The base table for configuration entities.',
    'fields' => array(
      'cfid' => array(
        'description' => 'The primary identifier for the cfe.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'machine_name' => array(
        'description' => 'The machine-readable name of this type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The type (bundle) of this cfe.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The title of the cfe.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'ID of Drupal user creator.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the cfe was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the cfe was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'settings' => array(
        'description' => 'The configuration settings',
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
      'meta' => array(
        'description' => 'Meta data',
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('cfid'),
  );

  // CFE Types
  $schema['capx_cfe_type'] = array(
    'description' => 'Stores information about all defined cfe types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique task type ID.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'A brief description of this type.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
        'translatable' => TRUE,
      ),
    ) + entity_exportable_schema_fields(),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  // Storage for organization aliases.
  $schema['capx_org_aliases'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique ID.',
      ),
      'tid' => array(
        'description' => 'ID of the term.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'code' => array(
        'description' => 'The organization code.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'alias' => array(
        'description' => 'The alias code of the organization code.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'ica' => array('id', 'code', 'alias'),
      'itc' => array('id', 'tid', 'code'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function stanford_capx_requirements($phase) {
  $t = get_t();
  $requirements = array();

  switch ($phase) {
    case 'runtime':
      // Ensure the modules' private files directory exists and is writable.
      if (!variable_get('file_private_path', FALSE)) {

        // Display a message to the user that private files dir must be configured.
        $summary = $t('The !directory must be configured for the CAPx module to work correctly.',
          array('!directory' => l($t('private files directory'), 'admin/config/media/file-system')));

        $requirements['stanford_capx'] = array(
          'title' => $t('Stanford CAPx'),
          'severity' => REQUIREMENT_ERROR,
          'value' => $summary,
        );
      }
      break;
  }
  return $requirements;
}

/**
 * Add the guuid field to the capx_profiles table.
 */
function stanford_capx_update_7200() {

  $table = "capx_profiles";
  $field = "guuid";
  $spec = array(
    'description' => 'A guuid that is not the profile id. Used for multiple creation.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
  );

  db_add_field($table, $field, $spec);

}

/**
 * If auto_nodetitle is enabled we should enable capx_auto_nodetitle.
 */
function stanford_capx_update_7201() {
  if (module_exists("auto_nodetitle")) {
    module_enable(array("capx_auto_nodetitle"));
  }
}

/**
 * Resave each mapper so they get the new default config keys.
 */
function stanford_capx_update_7202() {
  $mappers = CAPxMapper::loadAllMappers();
  foreach ($mappers as $mapper) {
    $mapper->settings['multiple'] = FALSE;
    $mapper->settings['subquery'] = '';
    $mapper->settings['guuidquery'] = '';
    $mapper->save();
  }
}
