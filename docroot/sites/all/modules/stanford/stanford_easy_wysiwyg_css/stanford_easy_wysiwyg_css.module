<?php

/**
 * Implements hook_help().
 */
function stanford_easy_wysiwyg_css_help($path, $arg) {
  switch ($path) {
    case 'admin/help#stanford_easy_wysiwyg_css':
      $output = '<h2>' . t('To Use') . '</h2>';
      $output .= '<ol><li>' . t('Enable the module and all dependencies.') . '</li>';
      $output .= '<li>' . t('Go to !wysiwyg and edit your desired WYSIWYG profile(s).', array('!wysiwyg' => l('WYSIYWG profiles', 'admin/config/content/wysiwyg'))) . '</li>';
      $output .= '<li>' . t('In the "CSS" section, select "All CSS from default front-end theme" from the "Editor CSS" dropdown.') . '</li>';
      $output .= '<li>' . t('Clear the cache.') . '</li>';
      $output .= '<li>' . t('Your WYSIWYG fields now should show the same CSS styles as your front-end theme.') . '</li>';
      $output .= '</ol>';
      $output .= '<p>' . t('Note: the difference between "Use theme CSS" and "All CSS from default front-end theme" is that the former only loads CSS files declared in a theme\'s .info file. ');
      $output .= t('The setting provided by this module accounts for CSS loaded by other modules, as well as CSS that may be added dynamically by your default theme and its base theme(s).') . '</.p>';
      return $output;
  }
}

/**
 * Implements hook_custom_theme().
 */
function stanford_easy_wysiwyg_css_custom_theme() {
  // Allow the user to request a particular theme via a query parameter.
  if (isset($_GET['stanford_easy_wysiwyg_css_theme'])) {
    return check_plain($_GET['stanford_easy_wysiwyg_css_theme']);
  }
}

/**
 * Implements hook_css_alter().
 */
function stanford_easy_wysiwyg_css_css_alter(&$css) {
  global $theme;

  $easy = &drupal_static(__FUNCTION__);
  if (!is_array($easy)) {
    $easy = variable_get("stanford_easy_wysiwyg_css", array());
  }

  // Only add if we don't already have one.
  if (isset($easy[$theme])) {
    return;
  }

  // Allow theme to alter first.
  $func = $theme . "_css_alter";
  if (function_exists($func)) {
    $func($css);
  }

  $wysiwyg_css_data = drupal_add_css();
  // Let CSS Injector do its thang.
  if (function_exists('css_injector_css_alter')) {
    css_injector_css_alter($wysiwyg_css_data);
  }
  // Sort the array of CSS files by weight.
  uasort($wysiwyg_css_data, function($a, $b) {
    return $a['weight'] - $b['weight'];
  });
  $wysiwyg_css = array();

  // Remove print stuff.
  foreach ($wysiwyg_css_data as $path => $data) {
    if ($data['media'] == "print") {
      continue;
    }
    $wysiwyg_css[] = $path;
  }

  $easy[$theme] = $wysiwyg_css;
  variable_set("stanford_easy_wysiwyg_css", $easy);

}

/**
 * Implements hook_flush_caches().
 */
function stanford_easy_wysiwyg_css_flush_caches() {
  variable_del('stanford_easy_wysiwyg_css');
}

/**
 * Implements hook_wysiwyg_editor_settings_alter().
 */
function stanford_easy_wysiwyg_css_wysiwyg_editor_settings_alter(&$settings, $context) {

  if ($context['profile']->settings['css_setting'] == "easy") {
    $sheets = stanford_easy_wysiwyg_css_get_sheets();

    if (!is_array($sheets)) {
      return FALSE;
    }

    foreach ($sheets as $k => $url) {
      if (file_uri_scheme($url) == "public" || file_uri_scheme($url) == "private") {

        $url = file_create_url($url);
        $url = parse_url($url);
        $path = $url['path'];
        $sheets[$k] = $path;

      }
      else {
        $sheets[$k] = url($url);
      }
    }
    $settings['contentsCss'] = $sheets;
  }

}

/**
 * Get all the stylesheets used on the front page.
 * @return array An array of stylesheets.
 */
function stanford_easy_wysiwyg_css_get_sheets() {

  $easy = variable_get("stanford_easy_wysiwyg_css", array());
  $theme_default = variable_get("theme_default");

  // Woot we have the stuff.
  if (isset($easy[$theme_default])) {
    return $easy[$theme_default];
  }

  // The theme has not been visited yet. Lets do that!
  $url = url("<front>", array("absolute" => TRUE));
  $options = array("query" => array("stanford_easy_wysiwyg_css_theme" => $theme_default));
  $result = drupal_http_request($url, $options);

  // The variable should be in the DB for us now.
  $easy_dbq = db_select("variable", "v")
              ->fields('v', array("value"))
              ->condition('name', 'stanford_easy_wysiwyg_css')
              ->execute()
              ->fetchObject();

  // Things can go wrong so do a check like a good dev.
  if (!isset($easy_dbq->value)) {
    drupal_set_message("Failed to gather css for the WYSIWYG editor. Please visit the home page and try again.", "error");
    return FALSE;
  }

  // Woot.
  $easy = unserialize($easy_dbq->value);

  // One last check before we are home free.
  if (!isset($easy[$theme_default])) {
    drupal_set_message("Failed to gather css for the WYSIWYG editor. Please visit the home page and try again.", "error");
    return FALSE;
  }

  // Gotcha!
  return $easy[$theme_default];

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function stanford_easy_wysiwyg_css_form_wysiwyg_profile_form_alter(&$form, &$form_state) {
  $form['css']['css_setting']['#options']['easy'] = t("All CSS from default front-end theme");
  $form['css']['css_setting']['#description'] .= '<br />' . t("All CSS from default front-end theme - loads all CSS used in generating a front-end page.");
}
