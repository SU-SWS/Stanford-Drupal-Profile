<?php

/**
 * stanford_fwb.install
 */

/**
 * Rename view block & change context/block config.
 */
function stanford_fwb_update_7101() {
  $views_hashes = variable_get('views_block_hashes', array());
  $bad_deltas = array();

  // Get bad deltas from hash values too.
  foreach (views_block_info() as $delta => $block) {
    if (strpos(strtolower($delta), 'midget') !== FALSE || strpos(strtolower($block['info']), 'midget') !== FALSE) {

      if (isset($views_hashes[$delta])) {
        $new_delta = $views_hashes[$delta];
        stanford_fwb_update_replace_name($new_delta);
        $new_delta = md5($new_delta);
      }
      else {
        $new_delta = $delta;
        stanford_fwb_update_replace_name($new_delta);
      }

      $bad_deltas[$delta] = $new_delta;
    }
  }

  // Update the views.
  $query = db_select('views_display', 'v')
    ->fields('v')
    ->condition('id', '%midget%', 'LIKE')
    ->execute();
  while ($row = $query->fetchAssoc()) {
    $updated_row = $row;
    stanford_fwb_update_replace_name($updated_row);

    db_update('views_display')
      ->fields($updated_row)
      ->condition('vid', $updated_row['vid'])
      ->condition('id', $row['id'])
      ->execute();
  }


  foreach ($bad_deltas as $old_delta => $new_delta) {

    // Update core block config.
    db_update('block')
      ->fields(array('delta' => $new_delta))
      ->condition('module', 'views')
      ->condition('delta', $old_delta)
      ->execute();

    // Update context.
    db_update('context')
      ->expression('reactions', 'replace(reactions, :old, :new)', array(
        ':old' => $old_delta,
        ':new' => $new_delta,
      ))
      ->condition('reactions', "%$old_delta%", 'LIKE')
      ->execute();

    // Update Block reference field data.
    $fields = field_read_fields(array('type' => 'blockreference'));
    foreach (array_keys($fields) as $field_name) {
      foreach (array('field_data_', 'field_revision_') as $table_prefix) {
        db_update("{$table_prefix}{$field_name}")
          ->expression("{$field_name}_moddelta", 'replace(' . $field_name . '_moddelta, :old, :new)', array(
            ':old' => $old_delta,
            ':new' => $new_delta,
          ))
          ->condition("{$field_name}_moddelta", "%$old_delta%", 'LIKE')
          ->execute();
      }
    }

    if (isset($views_hashes[$old_delta])) {
      unset($views_hashes[$old_delta]);
      $views_hashes[$new_delta] = $new_delta;
    }
  }
  variable_set('views_block_hashes', $views_hashes);
}

/**
 * Replace midget with shorts.
 *
 * We uses "shorts" to keep string length the same for instances with serialized
 * arrays.
 *
 * @param mixed $var
 *   String, array or object to clean up.
 */
function stanford_fwb_update_replace_name(&$var) {
  if (is_string($var)) {
    $var = str_replace('midget', 'shorts', $var);
    $var = str_replace('Midget', 'Short', $var);
    return;
  }

  if (is_array($var) || is_object($var)) {
    foreach ($var as &$item) {
      stanford_fwb_update_replace_name($item);
    }
    return;
  }
}