<?php

/**
 * @file
 * Code for the Stanford Sites Jumpstart module.
 */

/**
 * Implements hook_ctools_plugin_api().
 */
function stanford_jumpstart_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "context" && $api == "context") {
    return array("version" => "3");
  }
}

/**
 * Implements hook_preprocess_search_result().
 */
function stanford_jumpstart_preprocess_search_result(&$vars) {
  $vars['info'] = '';
}

/**
 * Implements hook_menu().
 */
function stanford_jumpstart_menu() {

  $items['admin/stanford-jumpstart'] = array(
    'title' => 'Jumpstart Help',
    'page callback' => 'stanford_jumpstart_help_pages',
    'page arguments' => array('help'),
    'access arguments' => array('access jumpstart help'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/stanford-jumpstart/help'] = array(
    'title' => 'Get Help',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 90,
  );
  $items['admin/stanford-jumpstart/features'] = array(
    'title' => 'Add Features',
    'page callback' => 'stanford_jumpstart_help_pages',
    'page arguments' => array('features'),
    'access arguments' => array('access jumpstart features'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 80,
  );
  $items['admin/stanford-jumpstart/launch-checklist'] = array(
    'title' => 'Launch Checklist',
    'page callback' => 'stanford_jumpstart_help_pages',
    'page arguments' => array('launch'),
    'access arguments' => array('access jumpstart help'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function stanford_jumpstart_permission() {
  return array(
    'administer jumpstart help' => array(
      'title' => t('Administer Jumpstart Help'),
      'description' => t('Configure jumpstart help settings'),
    ),
    'access jumpstart help' => array(
      'title' => t('Access Jumpstart Help'),
      'description' => t('View the Jumpstart Help pages, launch checklist and instructions'),
    ),
    'access jumpstart features' => array(
      'title' => t('Access Jumpstart Features'),
      'description' => t('View and request additional features within the Stanford Sites Jumpstart service.'),
    ),
    'jumpstart assign administrator role' => array(
      'title' => t('Assign Administrator Role'),
      'description' => t('Give users the "administrator" (i.e., "all-powerful") role.'),
      'restrict access' => TRUE,
    ),
    'jumpstart use full block' => array(
      'title' => t('Use Full Block Interface'),
      'description' => t('View all options for editing blocks.'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function stanford_jumpstart_block_info() {
  $blocks = array();
  $blocks['stanford_jumpstart_version'] = array(
    'info' => t('Jumpstart Version'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function stanford_jumpstart_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'stanford_jumpstart_version':
      $info = system_get_info('module', variable_get('install_profile'));
      $original_install = variable_get('stanford_jumpstart_original', array());

      if ($original_install) {
        $data = array(
          format_date($original_install['installed_date'], 'custom', 'n/j/Y'),
          $original_install['installed_version'],
        );
      }
      else {
        $data = array('Unknown', 'Unknown');
      }
      $data = array_merge($data, array(
        format_date($info['mtime'], 'custom', 'n/j/Y'),
        $info['version'],
      ));

      $block['subject'] = t('%name', array('%name' => $info['name']));
      $block['content'] = array(
        '#theme' => 'table',
        '#header' => array(
          t('Install Date'),
          t('Original Version'),
          t('Last Updated'),
          t('Current Version'),
        ),
        '#rows' => array($data),
      );
      break;
  }
  return $block;
}

/**
 * Returns a help page from a set of variables.
 *
 * @param string $key
 *   [Description].
 *
 * @return array
 *   [Description].
 */
function stanford_jumpstart_help_pages($key) {
  global $user;

  // Render array...
  $render = array();

  $content = variable_get("stanford_jumpstart_help_pages_" . $key,
    array(
      "content" => array(
        "#markup" => t("No content found."),
      ),
    )
  );

  // Set up the tokens for token replace.
  $tokens = array(
    'user' => $user,
    'system' => array(
      'base_path' => base_path(),
    ),
  );

  // If the return value is a render array process each regions markup.
  if (is_array($content)) {
    foreach ($content as $region => $values) {
      if (isset($values["#markup"])) {
        $render[$region]["#markup"] = token_replace($values["#markup"], $tokens);
      }
    }
  }

  // If the return value from the variable_get is just a plain string run
  // that through token replace as well and set it to the content region in
  // the render array. Lazy developers!
  if (is_string($content)) {
    $render["content"]["#markup"] = token_replace($content, $tokens);
  }

  // Allow other modules to alter.
  drupal_alter("stanford_jumpstart_help_pages", $render);

  // Return something.
  return $render;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function stanford_jumpstart_form_block_admin_configure_alter(&$form, &$form_state, $form_id) {
  if (!user_access('jumpstart use full block')) {
    $form['regions']['#type'] = 'hidden';
    $form['visibility']['node_type']['#type'] = 'hidden';
    $form['visibility']['role']['#type'] = 'hidden';
    $form['visibility']['user']['#type'] = 'hidden';
    $form['settings']['css_class']['#type'] = 'hidden';
    $form['visiblity']['context_respect']['#type'] = 'hidden';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function stanford_jumpstart_form_bean_form_alter(&$form, &$form_state, $form_id) {
  if (!user_access('jumpstart use full block')) {
    $form['revision']['#type'] = 'hidden';
    $form['actions']['delete']['#type'] = 'hidden';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function stanford_jumpstart_form_stanford_page_node_form_alter(&$form, &$form_state, $form_id) {
  if (!user_access('jumpstart use full block')) {
    $form['options']['promote']['#type'] = 'hidden';
    $form['options']['sticky']['#type'] = 'hidden';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function stanford_jumpstart_form_system_site_information_settings_alter(&$form, &$form_state, $form_id) {
  global $user;
  $form['site_information']['site_slogan']['#access'] = in_array('administrator', $user->roles);
  $form['error_page']['#access'] = in_array('administrator', $user->roles);
  $form['front_page']['#access'] = in_array('administrator', $user->roles);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function stanford_jumpstart_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  if (!user_access('jumpstart assign administrator role')) {
    $admin_rid = variable_get('user_admin_role', user_role_load_by_name('administrator')->rid);
    unset($form['account']['roles']['#options'][$admin_rid]);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function stanford_jumpstart_form_views_form_admin_views_user_system_1_alter(&$form, &$form_state, $form_id) {
  if (!user_access('jumpstart assign administrator role')) {
    $admin_rid = variable_get('user_admin_role', user_role_load_by_name('administrator')->rid);
    unset($form['add_roles']['#options'][$admin_rid]);
    unset($form['remove_roles']['#options'][$admin_rid]);
  }
}

/**
 * Implements hook_menu_alter().
 */
function stanford_jumpstart_menu_alter(&$items) {

  if (isset($items['admin/people/permissions'])) {
    $items['admin/people/permissions']['access arguments'] = array('jumpstart assign administrator role');
  }

  if (isset($items['admin/structure/block'])) {
    $items['admin/structure/block']['access arguments'] = array('jumpstart use full block');
  }

  if (isset($items['admin/structure/services'])) {
    $items['admin/structure/services']['access callback'] = array('user_access');
    $items['admin/structure/services']['access arguments'] = array('administer services');
  }

}

/**
 * Implements hook_filter_info_alter().
 */
function stanford_jumpstart_filter_info_alter(&$info) {
  // Add a prepare callback so that we can to some futzing.
  $info["pathologic"]["prepare callback"] = "stanford_jumpstart_pathologic_prepare_callback";
}

/**
 * Implements hook_pathologic_alter().
 */
function stanford_jumpstart_pathologic_prepare_callback($text, &$filter, $format, $langcode, $cache, $cache_id) {

  // Only alter on this one format...
  if ($format->format !== "content_editor_text_format") {
    // Pathalogic requires text to be passed back.
    return $text;
  }

  if (!preg_match('/jsa-content/', $filter->settings['local_paths'])) {
    $filter->settings['local_paths'] = "/jsa-content/\nhttps://sites.stanford.edu/jsa-content/\n" . $filter->settings['local_paths'];
  }

  return $text;
}

/**
 * Implements hook_preprocess_html().
 */
function stanford_jumpstart_preprocess_html(&$variables) {

  drupal_add_css(drupal_get_path('module', 'stanford_jumpstart') . '/css/jumpstart.css', array(
    'group' => CSS_THEME,
    'media' => 'all',
    'weight' => 110,
    'preprocess' => TRUE,
  ));

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function stanford_jumpstart_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  if (empty($form['#node_type']->type)) {
    $form['submission']['node_preview']['#default_value'] = 0;
  }
}
