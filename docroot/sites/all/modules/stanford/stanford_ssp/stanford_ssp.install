<?php

/**
 * @file
 * Schema definitions. Install/update/uninstall hooks.
 */

/**
 * Implements hook_install().
 */
function stanford_ssp_install() {
  variable_set('stanford_simplesamlphp_auth_activate', TRUE);
  variable_set('stanford_simplesamlphp_auth_allowdefaultlogin', TRUE);
  variable_set('stanford_ssp_automagic_login', TRUE);
  variable_set('stanford_ssp_force_https', FALSE);
  variable_set('stanford_ssp_redirect_on_login', FALSE);
  variable_set('stanford_simplesamlphp_auth_registerusers', TRUE);
  variable_set('stanford_simplesamlphp_auth_autoenablesaml', TRUE);
  variable_set('stanford_ssp_prevent_cache', FALSE);
  variable_set('stanford_simplesamlphp_auth_allowsetdrupalpwd', FALSE);
  variable_set('stanford_simplesamlphp_auth_installdir', '/opt/simplesamlphp');
  variable_set('stanford_simplesamlphp_auth_authsource', 'default-sp');
  variable_set('stanford_simplesamlphp_auth_user_name', 'displayName');
  variable_set('stanford_simplesamlphp_auth_unique_id', 'uid');
  variable_set('stanford_simplesamlphp_auth_mailattr', 'mail');
  variable_set('stanford_ssp_auth_restrictions', 'any');
  variable_set('stanford_ssp_auth_restriction_sunet', '');
  variable_set('stanford_ssp_auth_restriction_group', '');
  variable_set('stanford_ssp_auth_role_map', 'grant');
  variable_set('stanford_ssp_show_local_login', TRUE);
  variable_set('stanford_ssp_show_sso_login', TRUE);

  // Add default roles.
  $roles = array(
    'SSO User',
    'Stanford Student',
    'Stanford Staff',
    'Stanford Faculty',
  );

  foreach ($roles as $role) {
    $role_exists = (bool) db_query("SELECT COUNT(*) FROM {role} WHERE name = :name", array(':name' => $role))->fetchField();
    if (!$role_exists) {
      db_insert('role')
        ->fields(array(
          'name' => $role,
        ))
        ->execute();
      drupal_set_message(st('Added Role @role', array('@role' => $role)));
    }
  }

}

/**
 * Implements hook_uninstall().
 */
function stanford_ssp_uninstall() {
  variable_del('stanford_simplesamlphp_auth_activate');
  variable_del('stanford_simplesamlphp_auth_allowdefaultlogin');
  variable_del('stanford_ssp_automagic_login');
  variable_del('stanford_ssp_force_https');
  variable_del('stanford_ssp_redirect_on_login');
  variable_del('stanford_simplesamlphp_auth_registerusers');
  variable_del('stanford_simplesamlphp_auth_autoenablesaml');
  variable_del('stanford_ssp_prevent_cache');
  variable_del('stanford_simplesamlphp_auth_allowsetdrupalpwd');
  variable_del('stanford_simplesamlphp_auth_installdir');
  variable_del('stanford_simplesamlphp_auth_authsource');
  variable_del('stanford_simplesamlphp_auth_user_name');
  variable_del('stanford_simplesamlphp_auth_unique_id');
  variable_del('stanford_simplesamlphp_auth_mailattr');
  variable_del('stanford_ssp_auth_restrictions');
  variable_del('stanford_ssp_auth_restriction_sunet', '');
  variable_del('stanford_ssp_auth_restriction_group');
  variable_del('stanford_simplesamlphp_auth_allowdefaultloginroles');
  variable_del('stanford_simplesamlphp_auth_allowdefaultloginusers');
  variable_del('stanford_ssp_auth_role_map');
  variable_del('stanford_ssp_show_local_login');
  variable_del('stanford_ssp_show_sso_login');
  variable_del('stanford_ssp_sso_link_text');
  variable_del('stanford_ssp_debug');
}

/**
 * Implements hook_schema().
 */
function stanford_ssp_schema() {
  $schema['stanford_ssp_sunetid'] = array(
    'description' => 'mapping sunet to user',
    'fields' => array(
      'sunet' => array(
        'description' => 'the users sunetid',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The user id on this website.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
    ),
    'indexes' => array(
      'suuid' => array('sunet', 'uid'),
    ),
    'unique keys' => array(
      'uid' => array('uid')
    ),
    'foreign keys' => array(
      'uid' => array(
        'table' => 'user',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'primary key' => array('sunet'),
  );
  return $schema;
}

/**
 * Install database table matching SUNetIDs and user IDs.
 */
function stanford_ssp_update_7200() {
  drupal_install_schema("stanford_ssp");
}

/**
 * Update any existing authmaps from left over systems.
 */
function stanford_ssp_update_7201(&$sandbox) {
  db_update("authmap")
    ->fields(array("module" => "stanford_simplesamlphp_auth"))
    ->condition("module", "simplesamlphp_auth")
    ->execute();
}

/**
 * Enable two new dependencies: switch and stanford_simplesamlphp_auth.
 */
function stanford_ssp_update_7202() {

  if (!module_exists('stanford_simplesamlphp_auth')) {
    if (!module_enable(array('stanford_simplesamlphp_auth'))) {
      watchdog('stanford_ssp', 'Could not enable stanford_simplesamlphp_auth module');
      throw new DrupalUpdateException("Could not enable stanford_simplesamlphp_auth module. Please check that the module exists.");
    }
    else {
      watchdog('stanford_ssp', 'Enabled stanford_simplesamlphp_auth module.');
    }
  }

  if (!module_exists('switch')) {
    if (!module_enable(array('switch'))) {
      watchdog('stanford_ssp', 'Could not enable switch module');
      throw new DrupalUpdateException("Could not enable switch module. Please check that the module exists.");
    }
    else {
      watchdog('stanford_ssp', 'Enabled switch module.');
    }
  }

}

/**
 * Add 4 new roles.
 */
function stanford_ssp_update_7203() {
  // Add default roles.
  $roles = array(
    'SSO User',
    'Stanford Student',
    'Stanford Staff',
    'Stanford Faculty',
  );

  foreach ($roles as $role) {
    $role_exists = (bool) db_query("SELECT COUNT(*) FROM {role} WHERE name = :name", array(':name' => $role))->fetchField();
    if (!$role_exists) {
      db_insert('role')
        ->fields(array(
          'name' => $role,
        ))
        ->execute();
      drupal_set_message(st('Added Role @role', array('@role' => $role)));
    }
  }

}

/**
 * Set variables based on simplesamlphp_auth settings.
 */
function stanford_ssp_update_7204() {
  // Create an array where the key is the name of the simplesamlphp_auth
  // variable, and the value is the stanford_simplesamlphp_auth default value.
  // This works because Canada (mostly) kept the syntax the same.
  $contrib_variables = array(
    'simplesamlphp_auth_activate' => TRUE,
    'simplesamlphp_auth_allowdefaultlogin' => TRUE,
    'simplesamlphp_auth_allowdefaultloginroles' => '',
    'simplesamlphp_auth_allowdefaultloginusers' => '',
    'simplesamlphp_auth_allowsetdrupalpwd' => FALSE,
    'simplesamlphp_auth_authsource' => 'default-sp',
    'simplesamlphp_auth_installdir' => '/opt/simplesamlphp',
    'simplesamlphp_auth_logoutgotourl' => '',
    'simplesamlphp_auth_mailattr' => 'mail',
    'simplesamlphp_auth_registerusers' => TRUE,
    'simplesamlphp_auth_rolepopulation' => '',
    'simplesamlphp_auth_user_name' => 'displayName',
    'simplesamlphp_auth_user_register_original' => '',
  );

  // If the variable from simplesamlphp_auth is set, set
  // stanford_simplesamlphp_auth_foo to that value.
  foreach ($contrib_variables as $var => $new_value) {
    $old_value = variable_get($var, NULL);
    if (!is_null($old_value)) {
      variable_set('stanford_' . $var, $old_value);
    }
    else {
      variable_set('stanford_' . $var, $new_value);
    }
  }

  // A few variables don't have matching syntax.
  $forcehttps = variable_get('simplesamlphp_auth_forcehttps');
  if ($forcehttps == "1") {
    variable_set('stanford_ssp_force_https', TRUE);
  }
  else {
    variable_set('stanford_ssp_force_https', FALSE);
  }

  $roleevaleverytime = variable_get('simplesamlphp_auth_roleevaleverytime');
  if ($roleevaleverytime == "1") {
    variable_set('stanford_ssp_auth_role_map', 'reassign');
  }
  else {
    variable_set('stanford_ssp_auth_role_map', 'grant');
  }

  // And then a bunch we want to set explicitly.
  variable_set('stanford_simplesamlphp_auth_unique_id', 'uid');
  variable_set('stanford_ssp_automagic_login', TRUE);
  variable_set('stanford_ssp_redirect_on_login', FALSE);
  variable_set('stanford_simplesamlphp_auth_autoenablesaml', TRUE);
  variable_set('stanford_ssp_prevent_cache', FALSE);
  variable_set('stanford_ssp_auth_restrictions', 'any');
  variable_set('stanford_ssp_auth_restriction_sunet', '');
  variable_set('stanford_ssp_auth_restriction_group', '');
  variable_set('stanford_ssp_show_local_login', TRUE);
  variable_set('stanford_ssp_show_sso_login', TRUE);
  variable_set('stanford_ssp_sso_link_text', 'Log in with your SUNet ID Â»');
}

/**
 * Disable and uninstall simplesamlphp_auth contrib module.
 */
function stanford_ssp_update_7205() {
  module_disable(array('simplesamlphp_auth'), FALSE);
  drupal_uninstall_modules(array('simplesamlphp_auth'), FALSE);
}

/**
 * Grant permission for administrator role to administer stanford_ssp.
 */
function stanford_ssp_update_7206() {
  $admin_rid = variable_get('user_admin_role');
  user_role_grant_permissions($admin_rid, array("administer stanford_ssp"));
}
