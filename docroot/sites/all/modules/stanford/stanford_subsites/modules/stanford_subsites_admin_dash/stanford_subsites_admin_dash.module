<?php
/**
 * @file
 * stanford_subsites_admin_dash.module
 *
 * @author (s)
 *         Shea McKinney / sherakama
 *
 * @todo :::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 *
 *
 * :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 */

// Load Helper Module.
module_load_include('inc', 'stanford_subsites', 'stanford_subsites');


/**
 * Implements hook_help().
 */
function stanford_subsites_admin_dash_help($path, $arg) {
  switch ($path) {
    case 'admin/help#sws_admin_dash':
      return '<p>' . t('For more help please contact stanford web services: %email',
       array('%email' => 'help@stanford.edu')) . '</p>';
  }
  return;
}


/**
 * Implements hook_permission().
 */
function stanford_subsites_admin_dash_permission() {
  return array(
    'access sws admin dash' => array(
      'title' => t('Access Stanford Subsite Admin Dashboard'),
      'description' => t('See and use administration dashboard blocks'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function stanford_subsites_admin_dash_menu($items = array()) {

  $subsites = stanford_subsites_get_subsite_nodes("all", TRUE);
  if (empty($subsites)) {
    return;
  }

  $items['admin/config/subsites/dashboard'] = array(
    'title' => 'Manage Subsites',
    'page callback' => 'stanford_subsites_admin_dash_dashboard',
    'description' => 'An administration page for managing subsites and subsite content.',
    'access arguments' => array('access sws admin dash'),
    'type' => MENU_NORMAL_ITEM,
    'file' => "stanford_subsites_admin_dash.pages.inc",
    'expanded' => TRUE,
    'menu' => "menu-subsite-dashboards",
    'weight' => 5,
  );

  // If the shortcuts module exits then change the menu path.
  if (module_exists("stanford_jumpstart_shortcuts")) {
    $items['admin/config/subsites/dashboard']['menu_name'] = "menu-admin-shortcuts";
  }


  // $items['admin/config/subsites/dashboard/all'] = array(
  //   'title' => 'All subsites',
  //   'page callback' => 'stanford_subsites_admin_dash_dashboard',
  //   'page arguments' => array("all"),
  //   'description' => 'An administration page for managing subsites and subsite content.',
  //   'access arguments' => array('access sws admin dash'),
  //   'type' => MENU_NORMAL_ITEM,
  //   'file' => "stanford_subsites_admin_dash.pages.inc",
  //   'menu_name' => "menu-subsite-dashboards",
  // );

  foreach ($subsites as $subsite) {

    $menu_link_label = $subsite->{SUBSITE_NAME_FIELD}[LANGUAGE_NONE][0]['value'];
    if (!empty($subsite->{SUBSITE_2NDNAME_FIELD}[LANGUAGE_NONE][0]['value'])) {
      $menu_link_label .= " " . $subsite->{SUBSITE_2NDNAME_FIELD}[LANGUAGE_NONE][0]['value'];
    }

    $path = drupal_get_path_alias("node/" . $subsite->nid);

    $items['admin/config/subsites/dashboard/' . $path] = array(
      'title' => $menu_link_label,
      'page callback' => 'stanford_subsites_admin_dash_dashboard',
      'page arguments' => array($path),
      'description' => 'An administration page for managing subsites and subsite content.',
      'access arguments' => array('access sws admin dash'),
      'type' => MENU_NORMAL_ITEM,
      'file' => "stanford_subsites_admin_dash.pages.inc",
      'menu_name' => "menu-subsite-dashboards",
    );

    // If the shortcuts module exits then change the menu path.
    if (module_exists("stanford_jumpstart_shortcuts")) {
      $items['admin/config/subsites/dashboard/' . $path]['menu_name'] = "menu-admin-shortcuts";
    }

  }

  return $items;
}

/**
 * Implements hook_views_api().
 */
function stanford_subsites_admin_dash_views_api($module = NULL, $api = NULL) {
  return array("api" => "3.0");
}

/**
 * Implements hook_theme().
 */
function stanford_subsites_admin_dash_theme($existing, $type, $theme, $path) {
  $theme = array();
  $theme['page_subsite_dashboard'] = array(
    'render element' => 'page',
    'base hook' => 'page',
    'template' => 'page--admin--config--subsites--dashboard',
    'path' => drupal_get_path('module', 'stanford_subsites_admin_dash') . '/templates',
  );
  return $theme;
}

/**
 * Implements hook_init().
 */
function stanford_subsites_admin_dash_init() {

  // When a subsite is deleted we need to clear the caches.
  $clear_cache = variable_get("stanford_subsites_admin_dash_needs_cache_clear", FALSE);
  if ($clear_cache) {
    drupal_flush_all_caches();
    // $core = array('cache', 'cache_bootstrap', 'cache_filter', 'cache_page');
    // $cache_tables = array_merge(module_invoke_all('flush_caches'), $core);
    // $cache_tables[] = "cache_menu";
    // $cache_tables[] = "cache_admin_menu";
    // foreach ($cache_tables as $table) {
    //   cache_clear_all('*', $table, TRUE);
    // }
    variable_set("stanford_subsites_admin_dash_needs_cache_clear", FALSE);
  }

}


////////////////////////////////////////////////////////////////////////////////
// BLOCKS       ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

/**
 * Implements hook_block_info().
 */
function stanford_subsites_admin_dash_block_info() {

  // Banner block with big text heading.
  $blocks['subsites_dashboard_banner'] = array(
    'info' => t('Subsite dashboard banner'),
    'cache' => DRUPAL_NO_CACHE,
  );

  // A list of contexts.
  $blocks['subsites_dashboard_contexts'] = array(
    'info' => t('Subsite dashboard contexts'),
    'cache' => DRUPAL_NO_CACHE,
  );

  // A list of blocks
  $blocks['subsites_dashboard_blocks'] = array(
    'info' => t('Subsite dashboard blocks'),
    'cache' => DRUPAL_NO_CACHE,
  );

  // The content associated with a subsite. (embeds a view)
  $blocks['subsites_dashboard_content'] = array(
    'info' => t('Subsite dashboard content'),
    'cache' => DRUPAL_NO_CACHE,
  );

  // Create new options.
  $blocks['subsites_dashboard_create_new'] = array(
    'info' => t('Subsite dashboard create new'),
    'cache' => DRUPAL_NO_CACHE,
  );

  // Edit options.
  $blocks['subsites_dashboard_edit_subs'] = array(
    'info' => t('Subsite dashboard edit subsite'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function stanford_subsites_admin_dash_block_view($delta = '') {
  $block = array();
  $subsite = "all";
  $nid = stanford_subsites_get_subsite_workingspace();

  if (is_numeric($nid)) {
    $subsite = node_load($nid);
  }

  switch ($delta) {
    case 'subsites_dashboard_banner':
      $block['subject'] = isset($subsite->title) ? check_plain($subsite->title) : $subsite;
      $block['title'] = "<none>";
      $block['content'] = stanford_subsites_dashboard_banner_block($subsite);
      break;

    case 'subsites_dashboard_contexts':
      $block['subject'] = t("Contexts");
      $block['title'] = t("Contexts");
      $block['content'] = stanford_subsites_dashboard_contexts_block($subsite);
      break;

    case 'subsites_dashboard_blocks':
      $block['subject'] = t("Blocks");
      $block['title'] = t("Blocks");
      $block['content'] = stanford_subsites_dashboard_blocks_block($subsite);
      break;

    case 'subsites_dashboard_content':
      $block['subject'] = t("Content");
      $block['title'] = t("Content");
      $block['content'] = stanford_subsites_dashboard_content_block($subsite);
      break;

    case 'subsites_dashboard_create_new':
      $block['subject'] = t("New");
      $block['title'] = t("New");
      $block['content'] = stanford_subsites_dashboard_create_new_block($subsite);
      break;

    case 'subsites_dashboard_edit_subs':
      $block['subject'] = t("Edit");
      $block['title'] = t("Edit");
      $block['content'] = stanford_subsites_dashboard_edit_subs_block($subsite);
      break;

  }
  return $block;
}


/**
 * Returns the content for the dashboard banner block.
 *
 * Pretty much just a large title of the subsite's name.
 *
 * @param mixed $subsite
 *   Either a loaded subsite node or the keyword "all"
 *
 * @return string
 *   Block html content
 */
function stanford_subsites_dashboard_banner_block($subsite) {
  $content = "";

  if (!is_object($subsite)) {
    $title = t("All Subsites");
  }
  else {
    $title = check_plain($subsite->{SUBSITE_NAME_FIELD}[LANGUAGE_NONE][0]['value']);
  }

  if (!empty($subsite->{SUBSITE_2NDNAME_FIELD}[LANGUAGE_NONE][0]['value'])) {
    $title .= " " . check_plain($subsite->{SUBSITE_2NDNAME_FIELD}[LANGUAGE_NONE][0]['value']);
  }

  $content .= "<div class=\"inner-left\">";
    $content .= "<h2 class=\"sooper-dooper-big-heading\">" . $title . "</h2>";
    $content .= "<p>" . t("Subsite Dashboard") . "</p>";
  $content .= "</div>";

  return $content;
}

/**
 * Returns the content for the dashboard contexts block.
 *
 * Provides a list of contexts that are associated with a subsite in a table.
 *
 * @param mixed $subsite
 *   Either a loaded subsite node or the keyword "all"
 *
 * @return string
 *   Block html content
 */
function stanford_subsites_dashboard_contexts_block($subsite) {
  $content = "";
  // All contexts that are linked to a subsite.
  $contexts = stanford_subsites_admin_dash_get_subsite_contexts($subsite);
  $header = array(t("Name"), t("Description"), t("Paths"), t("Actions"));
  $rows = array();

  // In case we get "all" option.
  if (isset($subsite->nid)) {
    $index = stanford_subsite_index_get('nid', $subsite->nid);
    $alias = drupal_get_path_alias("node/" . $subsite->nid);
  }

  // Loop through the contexts and generate some values to populate the table with.
  foreach ($contexts as $context_name => $context) {
    $paths = array();

    // Check for a subsite nid in case we have the all option. If we have the all
    // option get the information about the subsite from the idex by context name.
    if (!isset($subsite->nid)) {
      $index = stanford_subsite_index_get('context', drupal_clean_css_identifier($context_name));
      if (isset($index->nid)) {
        $alias = drupal_get_path_alias("node/" . $index->nid);
      }
    }

    // Context does not match. End this loop.
    if (empty($index->nid)) {
      continue;
    }

    // If we have matching name and context then path up!
    if ($context->name == $index->context) {
      $paths[] = l($alias, $alias);
    }


    // Loop through the path conditions to gather paths.
    if (isset($context->conditions['path']['values'])) {
      foreach ($context->conditions['path']['values'] as $path) {
        if (stripos($path, $alias . "/") !== FALSE) {
          $paths[] = l($path, $path);
        }
      }
    }

    // Generate the list of items and rows for the table.
    $list = array("items" => $paths);
    $path_list = theme('item_list', $list);
    $edit = l(t("Edit"), "admin/structure/context/list/" . $context->name . "/edit");
    $rows[]["data"] = array($context->name, $context->description, $path_list, $edit);
  }

  // Sort by title by default.
  uasort($rows, "stanford_subsites_dash_sort_blocks_rows_data");

  // Create the pager.
  $limit = 10;
  pager_default_initialize(count($rows), $limit, 2);
  $page_get = isset($_GET['page']) ? check_plain($_GET['page']) : "0,0,0";
  $page_xp = explode(",", $page_get);
  $page = isset($page_xp[2]) ? $page_xp[2] : 0;

  // Cut out the right portion of the rows by where the pager is at.
  $render_rows = array_slice($rows, $page, ($page + $limit));

  // Create the table html.
  $table = array("header" => $header, "rows" => $render_rows);
  $content .= theme("table", $table);

  // Create the pager html.
  $args = array('quantity' => 6, "element" => 2);
  $content .= theme('pager', $args);

  return $content;
}

/**
 * Returns the content for the dashboard blocks block.
 *
 * Provides a table of block information of blocks that are related to the
 * chosen active subsite.
 *
 * @param mixed $subsite
 *   Either a loaded subsite node or the keyword "all"
 *
 * @return string
 *   Block html content
 */
function stanford_subsites_dashboard_blocks_block($subsite) {
  $content = "";
  // Get all contexts that are associated with subsites.
  $contexts = stanford_subsites_admin_dash_get_subsite_contexts($subsite);

  // In case we get "all" option.
  if (isset($subsite->nid)) {
    $index = stanford_subsite_index_get('nid', $subsite->nid);
    $alias = drupal_get_path_alias("node/" . $subsite->nid);
  }

  // Header options.
  // @todo: The sort does not do anything right now.
  $header = array(
    'title' => array('data' => t("Title"), 'type' => 'property', 'specifier' => 'name', 'sort' => 'desc'),
    'type' => array('data' => t("Type"), 'sort' => 'asc'),
    'context' => array('data' => t("Context")),
    'updated' => array('data' => t("Last Updated"), 'sort' => 'asc'),
    'author' => array('data' => t("Author"), 'sort' => 'asc'),
    'actions' => array('data' => t("Actions")),
  );
  $rows = array();

  // Block information is limited. Lets use the blocks overview page to help us.
  global $theme;
  module_load_include("inc", "block", "block.admin");
  // Lots of block informatin.
  $blocks = block_admin_display_prepare_blocks($theme);

  // Loop through the contexts to generate information to populate the table with.
  foreach ($contexts as $context_name => $context) {

    // Only continue if we have blocks.
    if (!isset($context->reactions['block']['blocks'])) {
      continue;
    }

    // If we don't have a subsite (all option). We can look up information by
    // the context name.
    if (!isset($subsite->nid)) {
      $index = stanford_subsite_index_get('context', drupal_clean_css_identifier($context_name));
      if (isset($index->nid)) {
        $alias = drupal_get_path_alias("node/" . $index->nid);
      }
    }

    // If we still do not have index information here the context is not a match
    // to a subsite and we can carry on.
    if (empty($index->nid)) {
      continue;
    }

    // Loop through the blocks as they have been identified as part of a subsite.
    foreach ($context->reactions['block']['blocks'] as $delta => $info) {

      // Beans are special fruit and we need to do special things for them.
      // Beans have extra information that is useful to us. Load the bean if it
      // is available.
      $bean = NULL;
      $block = block_load($info['module'], $info['delta']);
      if ($info['module'] == "bean" && function_exists("bean_load_delta")) {
        $bean = bean_load_delta($info['delta']);
      }

      // Ok, titles are funky. Need to run through all this to get em.
      $title = isset($bean->label) ? $bean->label : FALSE;
      if ($title == FALSE) {
        $i = 0;
        while (isset($blocks[$i])) {
          if ($blocks[$i]['delta'] == $block->delta && $blocks[$i]['module'] == $block->module) {
            $title = check_plain($blocks[$i]['info']);
            break;
          }
          else {
            $title = t("Missing label");
          }
          $i++;
        }
      }

      // Edit and configure exist for all blocks.
      $edit = isset($bean->type) ? l(t("Edit"), 'block/' . $bean->delta . '/edit') : l(t("Configure"), "admin/structure/block/manage/" . $info['module'] . "/" . $info['delta'] . "/configure");
      $configure = isset($bean->type) ? l(t("Configure"), "admin/structure/block/manage/" . $info['module'] . "/" . $info['delta'] . "/configure") : "";

      $rows[$delta]['title'] = $title;
      $rows[$delta]['type'] = isset($bean->type) ? $bean->type : "block";
      $rows[$delta]['context'][] = l(t($context->name), "admin/structure/context/list/" . $context->name . "/edit");
      $rows[$delta]['updated'] = isset($bean->changed) ? format_date($bean->changed, "small") : t("Not available");
      $rows[$delta]['author'] = isset($bean->changed) ? user_load($bean->uid)->name : t("Not available");
      $rows[$delta]['actions'] = $edit;

      if (!empty($configure)) {
        $rows[$delta]["actions"] .= " | " . $configure;
      }

    }

  }

  // Formatting again...
  foreach ($rows as $delta => &$info) {
    $info['context'] = theme("item_list", array("items" => $info["context"]));
  }

  // Sort by title by default.
  uasort($rows, "stanford_subsites_dash_sort_blocks_title");

  // Create a pager. Limit to 10 items.
  $limit = 10;
  pager_default_initialize(count($rows), $limit, 1);
  $page_get = isset($_GET['page']) ? check_plain($_GET['page']) : "0,0,0";
  $page_xp = explode(",", $page_get);
  $page = $page_xp[1];
  $min = ($page * $limit);
  $max = ($page * $limit) + $limit;

  // Pull out the portion of the whole group of rows that the pager is defining.
  $render_rows = array_slice($rows, $min, $max);

  // Generate table html.
  $table = array("header" => $header, "rows" => $render_rows, 'empty' => t('Sorry, no results found'));
  $content .= theme("table", $table);

  // Generate pager html.
  $args = array('quantity' => 6, "element" => 1);
  $content .= theme('pager', $args);

  return $content;
}

/**
 * Sort by block title.
 *
 * Array sort comparison for block titles.
 */
function stanford_subsites_dash_sort_blocks_title($a, $b) {
  return strcmp($a['title'], $b['title']);
}

/**
 * Sort by block data.
 *
 * Array sort comparison for block data.
 */
function stanford_subsites_dash_sort_blocks_rows_data($a, $b) {
  return strcmp($a['data'][0], $b['data'][0]);
}

/**
 * Stanford manage content block.
 *
 * @param object $subsite
 *   A loaded subsite node object.
 *
 * @return string
 *   Block content html.
 */
function stanford_subsites_dashboard_content_block($subsite) {

  // Get the manage content view.
  $view = views_get_view('subsite_dashboard_manage_content');
  $content = "";

  // The $exposed_filters keys must correctly correspond with the actual keys of
  // your view's exposed filters.
  $exposed_filters = array(
    'type' => 'All',
  );

  // Pass in exposed filter values. array_merge() order prioritizes user input.
  if (isset($view->exposed_input)) {
    $view->exposed_input = array_merge($exposed_filters, (array) $view->exposed_input);
    $view->exposed_raw_input = array_merge($exposed_filters, (array) $view->exposed_raw_input);
    $view->exposed_data = array_merge($exposed_filters, (array) $view->exposed_data);
  }

  // Only if we have a subsite.
  if (isset($subsite->nid)) {
    $tid = $subsite->{SUBSITE_TAGS_FIELD}[LANGUAGE_NONE][0]['tid'];
    $view->set_arguments(array($tid));
    $view->set_display("block");
  }

  // Use view's preview to generate the view.
  $content .= $view->preview();
  $view->destroy();

  // Return it.
  return $content;
}

/**
 * Create new options block. Generates links that allow for quick population of
 * a subsite with content.
 *
 * @param mixed $subsite
 *   Either the keyword all or a fully loaded subsite node object.
 *
 * @return string
 *   The block html output.
 */
function stanford_subsites_dashboard_create_new_block($subsite) {
  $content = "";
  $vars = array();
  $items = array();
  $types = node_type_get_types();

  if ($subsite) {
    $term = stanford_subsites_get_subsite_term_from_node($subsite);
  }

  // List out the available types of content that can/should go into a subsite.
  $enabled_types = variable_get('stanford_subsite_content_types', array());
  foreach ($enabled_types as $type) {

    if (!isset($types[$type])) {
      continue;
    }

    if (!empty($term)) {
      $items[] = l(t($types[$type]->name), "node/add/" . drupal_clean_css_identifier($type), array("query" => array(SUBSITE_TAGS_FIELD => $term->tid)));
    }
    else {
      $items[] = l(t($types[$type]->name), "node/add/" . drupal_clean_css_identifier($type));
    }


  }

  $vars['items'] = $items;
  $content = theme("item_list", $vars);

  return $content;
}

/**
 * A collection of links for edit actions on a subsite.
 *
 * Provides a few links to edit items of a subsite.
 *
 * @param mixed $subsite
 *   The keyword all or a fully loaded subsite node.
 *
 * @return string
 *   The block's HTML
 */
function stanford_subsites_dashboard_edit_subs_block($subsite) {

  // If no subsite then just return an empty string.
  if (empty($subsite) || $subsite == "all") {
    return "";
  }

  $content = "";
  $index = stanford_subsite_index_get('nid', $subsite->nid);
  $menu_name = $index->menu;
  $menu_url = "admin/structure/menu/manage/" . $menu_name;
  $edit_url = "node/" . $subsite->nid . "/edit";
  $vars = array();
  $items = array();

  $items[] = l(t("Menu"), $menu_url);
  $items[] = l(t("Settings"), $edit_url);

  $vars['items'] = $items;
  $content = theme("item_list", $vars);
  return $content;
}

/**
 * Returns a list of contexts filtered by the subsite of choice. Retuns all
 * contexts if the keywork "all" is passed in as the subsite parameter.
 *
 * @param mixed $subsite
 *   The keyword all or a fully loaded subsite node.
 *
 * @return string
 *   The block's HTML
 */
function stanford_subsites_admin_dash_get_subsite_contexts($subsite) {
  // Load up all contexts.
  $contexts = context_load();

  // If no subsite just return everything.
  if (!isset($subsite->nid) || $subsite == "all") {
    return $contexts;
  }

  // The subsite nid can give us the alias.
  $alias = drupal_get_path_alias("node/" . $subsite->nid);

  // Loop through each of the contexts trying to match up a subsite condition
  // to the passed in subsite variable. You can match a subsite by path or nid.
  // This is similar to the get_active_subsites() function.
  foreach ($contexts as $context_name => $context) {
    $valid = FALSE;

    if (isset($context->conditions['active_subsite'])) {
      if (in_array($subsite->nid, $context->conditions['active_subsite']['values'])) {
        $valid = TRUE;
      }
    }

    if (isset($context->conditions['path'])) {
      foreach ($context->conditions['path']['values'] as $path) {

        // Exact match.
        if ($path == $alias) {
          $valid = TRUE;
        }
        elseif (strpos($path, $alias . "/") !== FALSE) {
          $valid = TRUE;
        }
      }
    }

    if (!$valid) {
      unset($contexts[$context_name]);
    }

  }

  return $contexts;
}


/**
 * Implements hook_context_load_alter().
 */
function stanford_subsites_admin_dash_context_load_alter(&$context) {
  $key = "stanford_jumpstart_admin_shortcuts";
  // Look for the shortcuts context so we can add our block of links to it.
  if ($context->name == $key) {
    $subsites = stanford_subsites_get_subsite_nodes();

    // Only continue if there are subsites.
    if (empty($subsites)) {
      return;
    }

    $context->reactions["block"]['blocks']['menu-subsite-dashboards'] = array(
      "module" => "menu",
      "delta" => "menu-subsite-dashboards",
      "region" => "admin_shortcuts",
      "weight" => -10,
    );
  }
}

/**
 * Implements hook_node_presave().
 */
function stanford_subsites_admin_dash_node_insert($node) {
  if ($node->type == SUBSITE_CONTENT_TYPE) {
    variable_set("stanford_subsites_admin_dash_needs_cache_clear", TRUE);
  }
}

/**
 * Implements hook_node_presave().
 */
function stanford_subsites_admin_dash_node_update($node) {
  if ($node->type == SUBSITE_CONTENT_TYPE) {
    variable_set("stanford_subsites_admin_dash_needs_cache_clear", TRUE);
  }
}

/**
 * Implements hook_node_delete().
 */
function stanford_subsites_admin_dash_node_delete($node) {
  variable_set("stanford_subsites_admin_dash_needs_cache_clear", TRUE);
}
