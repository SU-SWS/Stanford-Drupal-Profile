diff --git a/paranoia.module b/paranoia.module
index 51279fe..05f7f76 100644
--- a/paranoia.module
+++ b/paranoia.module
@@ -94,19 +94,6 @@ function paranoia_remove_disabled_modules() {
 }
 
 /**
- * Implements hook_form_FORM_ID_alter().
- *
- * Disable executing PHP setting in VBO.
- */
-function paranoia_form_views_ui_config_item_form_alter(&$form, &$form_state) {
-  if ($form['#section'] == 'page-field-views_bulk_operations') {
-    $form['options']['vbo']['operations']['action::views_bulk_operations_script_action']['selected']['#default_value'] = FALSE;
-    $form['options']['vbo']['operations']['action::views_bulk_operations_script_action']['selected']['#value'] = FALSE;
-    $form['options']['vbo']['operations']['action::views_bulk_operations_script_action']['selected']['#disabled'] = TRUE;
-  }
-}
-
-/**
  * Implements hook_user_update().
  */
 function paranoia_user_update(&$edit, $account, $category) {
@@ -212,6 +199,7 @@ function paranoia_permissions_submit($form, &$form_state) {
 function paranoia_paranoia_disable_modules() {
   return array(
     'php',
+    'computed_field',
     'ds_format',
     'skinr_ui',
     'skinr_context_ui',
@@ -235,11 +223,25 @@ function paranoia_paranoia_hide_permissions() {
  */
 function paranoia_paranoia_hide_modules() {
   return array(
+    'computed_field' => 'Fields',
+    'ds_format' => 'Display Suite',
     'php' => 'Core',
     'paranoia' => 'Other',
+    'skinr_ui' => 'Skinr',
+    'skinr_context_ui' => 'Skinr',
   );
 }
 
+
+/**
+ * Implements hook_paranoia_hide_permissions().
+ *
+ * On behalf of backup_migrate.module.
+ */
+function backup_migrate_paranoia_hide_permissions() {
+  return array('restore from backup');
+}
+
 /**
  * Implements hook_paranoia_hide_permissions().
  *
@@ -340,6 +342,15 @@ function ctools_paranoia_hide_permissions() {
 }
 
 /**
+ * Implements hook_paranoia_hide_permissions().
+ *
+ * On behalf of custom_breadcrumbs.module.
+ */
+function custom_breadcrumbs_paranoia_hide_permissions() {
+  return array('use php in custom breadcrumbs');
+}
+
+/**
  * Implements hook_paranoia_hide_paths().
  *
  * On behalf of devel.module.
@@ -370,24 +381,75 @@ function paranoia_form_alter(&$form, &$form_state, $form_id) {
   if (array_key_exists($form_id, $forms_to_disable)) {
     $form['#access'] = FALSE;
     $form['#validate'][] = 'paranoia_form_validate_always_fail';
-    drupal_set_message(t('This form is disabled for security reasons. See <a href="https://www.drupal.org/node/2313945">details</a> on why this form is disabled.'), 'error');
+    $message = t(variable_get('paranoia_form_disabled_message', 'This form is disabled for security reasons. See <a href="https://www.drupal.org/node/2313945">details</a> on why this form is disabled.'));
+    drupal_set_message($message, 'error');
+  }
+
+  if ($form_id == "views_ui_config_item_form") {
+    // Block VBO's "Execute arbitrary PHP script" operation.
+    $form['options']['vbo_operations']['action::views_bulk_operations_script_action']['selected']['#default_value'] = FALSE;
+    $form['options']['vbo_operations']['action::views_bulk_operations_script_action']['selected']['#disabled'] = TRUE;
+    // Block Draggable Views's "Prepare arguments with PHP code" option.
+    unset($form['options']['draggableviews_setting_arguments']['#options']['php']);
+  }
+
+  // Disable Automatic Nodetitles's "Evaluate PHP in pattern" setting.
+  if ($form_id == "node_type_form") {
+    $form['auto_nodetitle']['ant_php']['#default_value'] = FALSE;
+    $form['auto_nodetitle']['ant_php']['#disabled'] = TRUE;
   }
+
+  // Disable Custom Breadcrumbs's ability to use PHP to determine breadcrumb visibility.
+  if ($form_id == "custom_breadcrumbs_form") {
+    unset($form['visibility_php']);
+  }
+
+  // Disable the ability to use PHP in Views Contextual Filters.
+  // See https://www.drupal.org/docs/7/modules/views/views-howtos/php-contextual-filters for example use cases.
+  if ($form_id == "views_ui_config_item_form") {
+    unset($form['options']['default_argument_type']['#options']['php']);
+    unset($form['options']['validate']['type']['#options']['php']);
+    unset($form['options']['validate']['options']['php']);
+  }
+
 }
 
 /**
  * Form validation that will always throw an error to prevent submits.
  */
 function paranoia_form_validate_always_fail() {
-  form_set_error('', t('This form is disabled for security reasons. See <a href="https://www.drupal.org/node/2313945">details</a> on why this form is disabled.'));
+  $message = t(variable_get('paranoia_form_disabled_message', 'This form is disabled for security reasons. See <a href="https://www.drupal.org/node/2313945">details</a> on why this form is disabled.'));
+  drupal_set_message($message, 'error');
 }
 
 /**
  * Implements paranoia_risky_forms().
  *
- * On behalf of views module.
+ * On behalf of backup_migrate module.
  */
-function views_paranoia_risky_forms() {
-  return array('views_ui_import_page');
+function backup_migrate_paranoia_risky_forms() {
+  return array(
+    'backup_migrate_crud_import_form',
+    'backup_migrate_ui_manual_restore_form',
+  );
+}
+
+/**
+ * Implements paranoia_risky_forms().
+ *
+ * On behalf of bundle_copy module.
+ */
+function bundle_copy_paranoia_risky_forms() {
+  return array('bundle_copy_import');
+}
+
+/**
+ * Implements paranoia_risky_forms().
+ *
+ * On behalf of ctools module.
+ */
+function ctools_paranoia_risky_forms() {
+  return array('ctools_export_ui_edit_item_wizard_form');
 }
 
 /**
@@ -400,6 +462,60 @@ function devel_paranoia_risky_forms() {
 }
 
 /**
+ * Implements paranoia_risky_forms().
+ *
+ * On behalf of feeds_ui module.
+ */
+function feeds_ui_paranoia_risky_forms() {
+  return array('feeds_ui_importer_import');
+}
+
+/**
+ * Implements paranoia_risky_forms().
+ *
+ * On behalf of flag module.
+ */
+function flag_paranoia_risky_forms() {
+  return array('flag_import_form');
+}
+
+/**
+ * Implements paranoia_risky_forms().
+ *
+ * On behalf of page_manager module.
+ */
+function page_manager_paranoia_risky_forms() {
+  return array('page_manager_page_import_subtask');
+}
+
+/**
+ * Implements paranoia_risky_forms().
+ *
+ * On behalf of relation_ui module.
+ */
+function relation_ui_paranoia_risky_forms() {
+  return array('relation_ui_type_import');
+}
+
+/**
+ * Implements paranoia_risky_forms().
+ *
+ * On behalf of rules_admin module.
+ */
+function rules_admin_paranoia_risky_forms() {
+  return array('rules_ui_import_form');
+}
+
+/**
+ * Implements paranoia_risky_forms().
+ *
+ * On behalf of views module.
+ */
+function views_paranoia_risky_forms() {
+  return ['views_ui_import_page'];
+}
+
+/**
  * Implements hook_cron_queue_info().
  */
 function paranoia_cron_queue_info() {
